--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 17.2

-- Started on 2025-02-21 23:10:40

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 16 (class 2615 OID 16488)
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- TOC entry 14 (class 2615 OID 16388)
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- TOC entry 24 (class 2615 OID 16618)
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- TOC entry 23 (class 2615 OID 16607)
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- TOC entry 12 (class 2615 OID 16386)
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- TOC entry 18 (class 2615 OID 16645)
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- TOC entry 6 (class 3079 OID 16646)
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- TOC entry 4223 (class 0 OID 0)
-- Dependencies: 6
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- TOC entry 17 (class 2615 OID 16599)
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- TOC entry 15 (class 2615 OID 16536)
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- TOC entry 21 (class 2615 OID 16949)
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- TOC entry 8 (class 3079 OID 16982)
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- TOC entry 4227 (class 0 OID 0)
-- Dependencies: 8
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- TOC entry 2 (class 3079 OID 16389)
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- TOC entry 4228 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- TOC entry 4 (class 3079 OID 16434)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- TOC entry 4229 (class 0 OID 0)
-- Dependencies: 4
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- TOC entry 5 (class 3079 OID 16471)
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- TOC entry 4230 (class 0 OID 0)
-- Dependencies: 5
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- TOC entry 7 (class 3079 OID 16950)
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- TOC entry 4231 (class 0 OID 0)
-- Dependencies: 7
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- TOC entry 3 (class 3079 OID 16423)
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- TOC entry 4232 (class 0 OID 0)
-- Dependencies: 3
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- TOC entry 1274 (class 1247 OID 28724)
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- TOC entry 1298 (class 1247 OID 28865)
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- TOC entry 1271 (class 1247 OID 28718)
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- TOC entry 1268 (class 1247 OID 28712)
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- TOC entry 1304 (class 1247 OID 28907)
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- TOC entry 1328 (class 1247 OID 29074)
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- TOC entry 1319 (class 1247 OID 29035)
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- TOC entry 1322 (class 1247 OID 29049)
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- TOC entry 1334 (class 1247 OID 29116)
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- TOC entry 1331 (class 1247 OID 29087)
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- TOC entry 371 (class 1255 OID 16534)
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- TOC entry 4233 (class 0 OID 0)
-- Dependencies: 371
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- TOC entry 523 (class 1255 OID 28694)
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- TOC entry 370 (class 1255 OID 16533)
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- TOC entry 4236 (class 0 OID 0)
-- Dependencies: 370
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- TOC entry 369 (class 1255 OID 16532)
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- TOC entry 4238 (class 0 OID 0)
-- Dependencies: 369
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- TOC entry 372 (class 1255 OID 16591)
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- TOC entry 4255 (class 0 OID 0)
-- Dependencies: 372
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- TOC entry 376 (class 1255 OID 16612)
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- TOC entry 4257 (class 0 OID 0)
-- Dependencies: 376
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- TOC entry 373 (class 1255 OID 16593)
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- TOC entry 4259 (class 0 OID 0)
-- Dependencies: 373
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- TOC entry 374 (class 1255 OID 16603)
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- TOC entry 375 (class 1255 OID 16604)
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- TOC entry 377 (class 1255 OID 16614)
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- TOC entry 4288 (class 0 OID 0)
-- Dependencies: 377
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- TOC entry 313 (class 1255 OID 16387)
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- TOC entry 539 (class 1255 OID 29109)
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- TOC entry 545 (class 1255 OID 29191)
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- TOC entry 541 (class 1255 OID 29121)
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- TOC entry 537 (class 1255 OID 29071)
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- TOC entry 536 (class 1255 OID 29066)
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- TOC entry 540 (class 1255 OID 29117)
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- TOC entry 542 (class 1255 OID 29128)
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- TOC entry 535 (class 1255 OID 29065)
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- TOC entry 544 (class 1255 OID 29190)
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- TOC entry 534 (class 1255 OID 29063)
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- TOC entry 538 (class 1255 OID 29098)
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- TOC entry 543 (class 1255 OID 29184)
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- TOC entry 530 (class 1255 OID 28972)
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- TOC entry 526 (class 1255 OID 28946)
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 525 (class 1255 OID 28945)
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 524 (class 1255 OID 28944)
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 527 (class 1255 OID 28958)
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- TOC entry 532 (class 1255 OID 29011)
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- TOC entry 531 (class 1255 OID 28974)
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- TOC entry 533 (class 1255 OID 29027)
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- TOC entry 528 (class 1255 OID 28961)
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- TOC entry 529 (class 1255 OID 28962)
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- TOC entry 513 (class 1255 OID 16974)
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 243 (class 1259 OID 16519)
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- TOC entry 4322 (class 0 OID 0)
-- Dependencies: 243
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- TOC entry 273 (class 1259 OID 28869)
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- TOC entry 4324 (class 0 OID 0)
-- Dependencies: 273
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- TOC entry 264 (class 1259 OID 28666)
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- TOC entry 4326 (class 0 OID 0)
-- Dependencies: 264
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- TOC entry 4327 (class 0 OID 0)
-- Dependencies: 264
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- TOC entry 242 (class 1259 OID 16512)
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- TOC entry 4329 (class 0 OID 0)
-- Dependencies: 242
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- TOC entry 268 (class 1259 OID 28756)
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- TOC entry 4331 (class 0 OID 0)
-- Dependencies: 268
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- TOC entry 267 (class 1259 OID 28744)
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- TOC entry 4333 (class 0 OID 0)
-- Dependencies: 267
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- TOC entry 266 (class 1259 OID 28731)
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- TOC entry 4335 (class 0 OID 0)
-- Dependencies: 266
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- TOC entry 274 (class 1259 OID 28919)
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- TOC entry 241 (class 1259 OID 16501)
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- TOC entry 4338 (class 0 OID 0)
-- Dependencies: 241
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- TOC entry 240 (class 1259 OID 16500)
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- TOC entry 4340 (class 0 OID 0)
-- Dependencies: 240
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- TOC entry 271 (class 1259 OID 28798)
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- TOC entry 4342 (class 0 OID 0)
-- Dependencies: 271
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- TOC entry 272 (class 1259 OID 28816)
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- TOC entry 4344 (class 0 OID 0)
-- Dependencies: 272
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- TOC entry 244 (class 1259 OID 16527)
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- TOC entry 4346 (class 0 OID 0)
-- Dependencies: 244
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- TOC entry 265 (class 1259 OID 28696)
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- TOC entry 4348 (class 0 OID 0)
-- Dependencies: 265
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- TOC entry 4349 (class 0 OID 0)
-- Dependencies: 265
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- TOC entry 270 (class 1259 OID 28783)
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- TOC entry 4351 (class 0 OID 0)
-- Dependencies: 270
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- TOC entry 269 (class 1259 OID 28774)
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- TOC entry 4353 (class 0 OID 0)
-- Dependencies: 269
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- TOC entry 4354 (class 0 OID 0)
-- Dependencies: 269
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- TOC entry 239 (class 1259 OID 16489)
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- TOC entry 4356 (class 0 OID 0)
-- Dependencies: 239
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- TOC entry 4357 (class 0 OID 0)
-- Dependencies: 239
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- TOC entry 293 (class 1259 OID 29305)
-- Name: advertisements; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.advertisements (
    id_advertisements integer NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    status text NOT NULL,
    issue_date date NOT NULL,
    expiration_date date NOT NULL,
    departments text,
    CONSTRAINT advertisements_departments_check CHECK ((departments = ANY (ARRAY['All'::text, 'Cocina'::text, 'Mantenimiento'::text, 'Seguridad'::text, 'Almacen'::text, 'Administración'::text, 'Ama de llaves'::text, 'Alimentos y Bebidas'::text, 'Ventas'::text, 'RRHH'::text, 'Recepción'::text]))),
    CONSTRAINT advertisements_status_check CHECK ((status = ANY (ARRAY['activo'::text, 'inactivo'::text, 'programado'::text])))
);


ALTER TABLE public.advertisements OWNER TO postgres;

--
-- TOC entry 292 (class 1259 OID 29304)
-- Name: advertisements_id_advertisements_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.advertisements_id_advertisements_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.advertisements_id_advertisements_seq OWNER TO postgres;

--
-- TOC entry 4365 (class 0 OID 0)
-- Dependencies: 292
-- Name: advertisements_id_advertisements_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.advertisements_id_advertisements_seq OWNED BY public.advertisements.id_advertisements;


--
-- TOC entry 291 (class 1259 OID 29282)
-- Name: checkin_checkout_records; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.checkin_checkout_records (
    id_record integer NOT NULL,
    id_employee integer NOT NULL,
    action text NOT NULL,
    action_type text DEFAULT 'security'::text,
    record_date date DEFAULT CURRENT_DATE NOT NULL,
    record_time time without time zone DEFAULT CURRENT_TIME NOT NULL,
    auth_method text DEFAULT 'QR'::text,
    CONSTRAINT checkin_checkout_records_action_check CHECK ((action = ANY (ARRAY['checkin'::text, 'checkout'::text]))),
    CONSTRAINT checkin_checkout_records_action_type_check CHECK ((action_type = ANY (ARRAY['security'::text, 'canteen'::text]))),
    CONSTRAINT checkin_checkout_records_auth_method_check CHECK ((auth_method = ANY (ARRAY['QR'::text, 'NFC'::text, 'biometría'::text])))
);


ALTER TABLE public.checkin_checkout_records OWNER TO postgres;

--
-- TOC entry 290 (class 1259 OID 29281)
-- Name: checkin_checkout_records_id_record_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.checkin_checkout_records_id_record_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.checkin_checkout_records_id_record_seq OWNER TO postgres;

--
-- TOC entry 4368 (class 0 OID 0)
-- Dependencies: 290
-- Name: checkin_checkout_records_id_record_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.checkin_checkout_records_id_record_seq OWNED BY public.checkin_checkout_records.id_record;


--
-- TOC entry 301 (class 1259 OID 29362)
-- Name: daily_attendancecanteen; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.daily_attendancecanteen (
    id_record integer NOT NULL,
    id_employee integer NOT NULL,
    employeename text NOT NULL,
    department text NOT NULL,
    checkin_time time without time zone,
    checkout_time time without time zone,
    record_date date DEFAULT CURRENT_DATE NOT NULL,
    came_in boolean DEFAULT false
);


ALTER TABLE public.daily_attendancecanteen OWNER TO postgres;

--
-- TOC entry 300 (class 1259 OID 29361)
-- Name: daily_attendancecanteen_id_record_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.daily_attendancecanteen_id_record_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.daily_attendancecanteen_id_record_seq OWNER TO postgres;

--
-- TOC entry 4371 (class 0 OID 0)
-- Dependencies: 300
-- Name: daily_attendancecanteen_id_record_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.daily_attendancecanteen_id_record_seq OWNED BY public.daily_attendancecanteen.id_record;


--
-- TOC entry 299 (class 1259 OID 29343)
-- Name: daily_attendancesecurity; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.daily_attendancesecurity (
    id_record integer NOT NULL,
    id_employee integer NOT NULL,
    employeename text NOT NULL,
    department text NOT NULL,
    checkin_time time without time zone,
    checkout_time time without time zone,
    record_date date DEFAULT CURRENT_DATE NOT NULL,
    justified boolean DEFAULT false,
    came_in boolean DEFAULT false
);


ALTER TABLE public.daily_attendancesecurity OWNER TO postgres;

--
-- TOC entry 298 (class 1259 OID 29342)
-- Name: daily_attendancesecurity_id_record_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.daily_attendancesecurity_id_record_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.daily_attendancesecurity_id_record_seq OWNER TO postgres;

--
-- TOC entry 4374 (class 0 OID 0)
-- Dependencies: 298
-- Name: daily_attendancesecurity_id_record_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.daily_attendancesecurity_id_record_seq OWNED BY public.daily_attendancesecurity.id_record;


--
-- TOC entry 285 (class 1259 OID 29230)
-- Name: departments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.departments (
    id_department integer NOT NULL,
    name_department text NOT NULL
);


ALTER TABLE public.departments OWNER TO postgres;

--
-- TOC entry 284 (class 1259 OID 29229)
-- Name: departments_id_department_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.departments_id_department_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.departments_id_department_seq OWNER TO postgres;

--
-- TOC entry 4377 (class 0 OID 0)
-- Dependencies: 284
-- Name: departments_id_department_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.departments_id_department_seq OWNED BY public.departments.id_department;


--
-- TOC entry 289 (class 1259 OID 29255)
-- Name: employees; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.employees (
    id_employee integer NOT NULL,
    employeename text NOT NULL,
    email text NOT NULL,
    department integer NOT NULL,
    subdepartment integer,
    phonenumber text,
    address text,
    status text NOT NULL,
    password text NOT NULL,
    role text NOT NULL,
    force_password_reset boolean DEFAULT false,
    deleted_at timestamp without time zone,
    qr_enabled boolean DEFAULT true,
    fingerprint_data bytea,
    nfc_id text,
    CONSTRAINT employees_role_check CHECK ((role = ANY (ARRAY['Admin'::text, 'Employee'::text]))),
    CONSTRAINT employees_status_check CHECK ((status = ANY (ARRAY['activo'::text, 'baja'::text])))
);


ALTER TABLE public.employees OWNER TO postgres;

--
-- TOC entry 288 (class 1259 OID 29254)
-- Name: employees_id_employee_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.employees_id_employee_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.employees_id_employee_seq OWNER TO postgres;

--
-- TOC entry 4380 (class 0 OID 0)
-- Dependencies: 288
-- Name: employees_id_employee_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.employees_id_employee_seq OWNED BY public.employees.id_employee;


--
-- TOC entry 297 (class 1259 OID 29327)
-- Name: password_reset_tokens; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.password_reset_tokens (
    id integer NOT NULL,
    id_employee integer NOT NULL,
    token text NOT NULL,
    expiration timestamp without time zone NOT NULL
);


ALTER TABLE public.password_reset_tokens OWNER TO postgres;

--
-- TOC entry 296 (class 1259 OID 29326)
-- Name: password_reset_tokens_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.password_reset_tokens_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.password_reset_tokens_id_seq OWNER TO postgres;

--
-- TOC entry 4383 (class 0 OID 0)
-- Dependencies: 296
-- Name: password_reset_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.password_reset_tokens_id_seq OWNED BY public.password_reset_tokens.id;


--
-- TOC entry 295 (class 1259 OID 29316)
-- Name: revoked_tokens; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.revoked_tokens (
    id integer NOT NULL,
    token text NOT NULL,
    revocation_date timestamp without time zone NOT NULL
);


ALTER TABLE public.revoked_tokens OWNER TO postgres;

--
-- TOC entry 294 (class 1259 OID 29315)
-- Name: revoked_tokens_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.revoked_tokens_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.revoked_tokens_id_seq OWNER TO postgres;

--
-- TOC entry 4386 (class 0 OID 0)
-- Dependencies: 294
-- Name: revoked_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.revoked_tokens_id_seq OWNED BY public.revoked_tokens.id;


--
-- TOC entry 287 (class 1259 OID 29241)
-- Name: subdepartments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.subdepartments (
    id_subdepartment integer NOT NULL,
    id_department integer NOT NULL,
    name_subdepartment text NOT NULL
);


ALTER TABLE public.subdepartments OWNER TO postgres;

--
-- TOC entry 286 (class 1259 OID 29240)
-- Name: subdepartments_id_subdepartment_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.subdepartments_id_subdepartment_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.subdepartments_id_subdepartment_seq OWNER TO postgres;

--
-- TOC entry 4389 (class 0 OID 0)
-- Dependencies: 286
-- Name: subdepartments_id_subdepartment_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.subdepartments_id_subdepartment_seq OWNED BY public.subdepartments.id_subdepartment;


--
-- TOC entry 283 (class 1259 OID 29194)
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- TOC entry 277 (class 1259 OID 29029)
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- TOC entry 280 (class 1259 OID 29051)
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- TOC entry 279 (class 1259 OID 29050)
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 245 (class 1259 OID 16540)
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- TOC entry 4395 (class 0 OID 0)
-- Dependencies: 245
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- TOC entry 247 (class 1259 OID 16582)
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- TOC entry 246 (class 1259 OID 16555)
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- TOC entry 4398 (class 0 OID 0)
-- Dependencies: 246
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- TOC entry 275 (class 1259 OID 28976)
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- TOC entry 276 (class 1259 OID 28990)
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- TOC entry 262 (class 1259 OID 16970)
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER VIEW vault.decrypted_secrets OWNER TO supabase_admin;

--
-- TOC entry 3749 (class 2604 OID 16504)
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- TOC entry 3799 (class 2604 OID 29308)
-- Name: advertisements id_advertisements; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.advertisements ALTER COLUMN id_advertisements SET DEFAULT nextval('public.advertisements_id_advertisements_seq'::regclass);


--
-- TOC entry 3794 (class 2604 OID 29285)
-- Name: checkin_checkout_records id_record; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.checkin_checkout_records ALTER COLUMN id_record SET DEFAULT nextval('public.checkin_checkout_records_id_record_seq'::regclass);


--
-- TOC entry 3806 (class 2604 OID 29365)
-- Name: daily_attendancecanteen id_record; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancecanteen ALTER COLUMN id_record SET DEFAULT nextval('public.daily_attendancecanteen_id_record_seq'::regclass);


--
-- TOC entry 3802 (class 2604 OID 29346)
-- Name: daily_attendancesecurity id_record; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancesecurity ALTER COLUMN id_record SET DEFAULT nextval('public.daily_attendancesecurity_id_record_seq'::regclass);


--
-- TOC entry 3789 (class 2604 OID 29233)
-- Name: departments id_department; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.departments ALTER COLUMN id_department SET DEFAULT nextval('public.departments_id_department_seq'::regclass);


--
-- TOC entry 3791 (class 2604 OID 29258)
-- Name: employees id_employee; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees ALTER COLUMN id_employee SET DEFAULT nextval('public.employees_id_employee_seq'::regclass);


--
-- TOC entry 3801 (class 2604 OID 29330)
-- Name: password_reset_tokens id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.password_reset_tokens ALTER COLUMN id SET DEFAULT nextval('public.password_reset_tokens_id_seq'::regclass);


--
-- TOC entry 3800 (class 2604 OID 29319)
-- Name: revoked_tokens id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.revoked_tokens ALTER COLUMN id SET DEFAULT nextval('public.revoked_tokens_id_seq'::regclass);


--
-- TOC entry 3790 (class 2604 OID 29244)
-- Name: subdepartments id_subdepartment; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subdepartments ALTER COLUMN id_subdepartment SET DEFAULT nextval('public.subdepartments_id_subdepartment_seq'::regclass);


--
-- TOC entry 4177 (class 0 OID 16519)
-- Dependencies: 243
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
\.


--
-- TOC entry 4191 (class 0 OID 28869)
-- Dependencies: 273
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- TOC entry 4182 (class 0 OID 28666)
-- Dependencies: 264
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
\.


--
-- TOC entry 4176 (class 0 OID 16512)
-- Dependencies: 242
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4186 (class 0 OID 28756)
-- Dependencies: 268
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
\.


--
-- TOC entry 4185 (class 0 OID 28744)
-- Dependencies: 267
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- TOC entry 4184 (class 0 OID 28731)
-- Dependencies: 266
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- TOC entry 4192 (class 0 OID 28919)
-- Dependencies: 274
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4175 (class 0 OID 16501)
-- Dependencies: 241
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
\.


--
-- TOC entry 4189 (class 0 OID 28798)
-- Dependencies: 271
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- TOC entry 4190 (class 0 OID 28816)
-- Dependencies: 272
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- TOC entry 4178 (class 0 OID 16527)
-- Dependencies: 244
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- TOC entry 4183 (class 0 OID 28696)
-- Dependencies: 265
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
\.


--
-- TOC entry 4188 (class 0 OID 28783)
-- Dependencies: 270
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4187 (class 0 OID 28774)
-- Dependencies: 269
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4173 (class 0 OID 16489)
-- Dependencies: 239
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
\.


--
-- TOC entry 3737 (class 0 OID 16790)
-- Dependencies: 255
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- TOC entry 4207 (class 0 OID 29305)
-- Dependencies: 293
-- Data for Name: advertisements; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.advertisements (id_advertisements, title, description, status, issue_date, expiration_date, departments) FROM stdin;
1	Promoción 1	Oferta especial para Almacen	programado	2025-02-17	2025-02-28	Almacen
2	Promoción 2	Oferta especial para Almacen	programado	2025-02-14	2025-03-12	Almacen
3	Promoción 3	Oferta especial para Seguridad	programado	2025-02-18	2025-03-05	Seguridad
4	Promoción 4	Oferta especial para All	programado	2025-02-16	2025-03-06	All
5	Promoción 5	Oferta especial para Mantenimiento	programado	2025-02-14	2025-03-06	Mantenimiento
6	Promoción 6	Oferta especial para Seguridad	inactivo	2025-02-20	2025-03-08	Seguridad
7	Promoción 7	Oferta especial para Mantenimiento	programado	2025-02-17	2025-03-08	Mantenimiento
8	Promoción 8	Oferta especial para All	activo	2025-02-16	2025-03-08	All
9	Promoción 9	Oferta especial para Cocina	inactivo	2025-02-21	2025-03-08	Cocina
10	Promoción 10	Oferta especial para Mantenimiento	activo	2025-02-13	2025-03-12	Mantenimiento
11	Promoción 11	Oferta especial para Cocina	programado	2025-02-17	2025-03-06	Cocina
12	Promoción 12	Oferta especial para Seguridad	inactivo	2025-02-18	2025-03-02	Seguridad
13	Promoción 13	Oferta especial para Mantenimiento	inactivo	2025-02-15	2025-03-03	Mantenimiento
14	Promoción 14	Oferta especial para All	programado	2025-02-15	2025-03-10	All
15	Promoción 15	Oferta especial para Almacen	inactivo	2025-02-17	2025-03-03	Almacen
16	Promoción 16	Oferta especial para Almacen	programado	2025-02-14	2025-03-06	Almacen
17	Promoción 17	Oferta especial para Almacen	activo	2025-02-20	2025-03-11	Almacen
18	Promoción 18	Oferta especial para Cocina	inactivo	2025-02-19	2025-03-05	Cocina
19	Promoción 19	Oferta especial para Mantenimiento	programado	2025-02-14	2025-03-08	Mantenimiento
20	Promoción 20	Oferta especial para Mantenimiento	programado	2025-02-14	2025-03-01	Mantenimiento
21	Promoción 21	Oferta especial para All	activo	2025-02-19	2025-03-05	All
22	Promoción 22	Oferta especial para Seguridad	activo	2025-02-15	2025-03-05	Seguridad
23	Promoción 23	Oferta especial para Cocina	activo	2025-02-16	2025-03-11	Cocina
24	Promoción 24	Oferta especial para Mantenimiento	programado	2025-02-17	2025-03-04	Mantenimiento
25	Promoción 25	Oferta especial para Mantenimiento	programado	2025-02-19	2025-03-08	Mantenimiento
26	Promoción 26	Oferta especial para Seguridad	inactivo	2025-02-18	2025-03-04	Seguridad
27	Promoción 27	Oferta especial para Cocina	inactivo	2025-02-17	2025-03-07	Cocina
28	Promoción 28	Oferta especial para Seguridad	programado	2025-02-12	2025-02-28	Seguridad
29	Promoción 29	Oferta especial para All	inactivo	2025-02-12	2025-03-03	All
30	Promoción 30	Oferta especial para Cocina	programado	2025-02-20	2025-03-03	Cocina
31	Promoción 31	Oferta especial para Seguridad	programado	2025-02-12	2025-03-06	Seguridad
32	Promoción 32	Oferta especial para Almacen	programado	2025-02-12	2025-03-01	Almacen
33	Promoción 33	Oferta especial para Seguridad	programado	2025-02-14	2025-02-27	Seguridad
34	Promoción 34	Oferta especial para Cocina	inactivo	2025-02-19	2025-03-14	Cocina
35	Promoción 35	Oferta especial para Cocina	activo	2025-02-20	2025-02-28	Cocina
36	Promoción 36	Oferta especial para Mantenimiento	activo	2025-02-12	2025-03-06	Mantenimiento
37	Promoción 37	Oferta especial para Mantenimiento	activo	2025-02-15	2025-03-05	Mantenimiento
38	Promoción 38	Oferta especial para Seguridad	activo	2025-02-21	2025-03-02	Seguridad
39	Promoción 39	Oferta especial para All	programado	2025-02-13	2025-03-12	All
40	Promoción 40	Oferta especial para Cocina	programado	2025-02-17	2025-03-01	Cocina
41	Promoción 41	Oferta especial para Seguridad	activo	2025-02-17	2025-02-27	Seguridad
42	Promoción 42	Oferta especial para Cocina	activo	2025-02-16	2025-03-07	Cocina
43	Promoción 43	Oferta especial para Seguridad	activo	2025-02-15	2025-03-06	Seguridad
44	Promoción 44	Oferta especial para Cocina	activo	2025-02-15	2025-03-07	Cocina
45	Promoción 45	Oferta especial para Mantenimiento	programado	2025-02-16	2025-03-03	Mantenimiento
46	Promoción 46	Oferta especial para Almacen	inactivo	2025-02-14	2025-03-01	Almacen
47	Promoción 47	Oferta especial para Seguridad	programado	2025-02-14	2025-03-11	Seguridad
48	Promoción 48	Oferta especial para All	activo	2025-02-13	2025-03-12	All
49	Promoción 49	Oferta especial para Cocina	activo	2025-02-18	2025-03-13	Cocina
50	Promoción 50	Oferta especial para Seguridad	activo	2025-02-20	2025-03-11	Seguridad
51	Promoción 51	Oferta especial para Mantenimiento	inactivo	2025-02-13	2025-03-03	Mantenimiento
52	Promoción 52	Oferta especial para Seguridad	inactivo	2025-02-17	2025-03-06	Seguridad
53	Promoción 53	Oferta especial para Mantenimiento	activo	2025-02-13	2025-02-28	Mantenimiento
54	Promoción 54	Oferta especial para Cocina	inactivo	2025-02-16	2025-03-04	Cocina
55	Promoción 55	Oferta especial para Mantenimiento	inactivo	2025-02-14	2025-03-01	Mantenimiento
56	Promoción 56	Oferta especial para Mantenimiento	activo	2025-02-20	2025-02-28	Mantenimiento
57	Promoción 57	Oferta especial para Seguridad	activo	2025-02-17	2025-03-10	Seguridad
58	Promoción 58	Oferta especial para Mantenimiento	activo	2025-02-13	2025-03-06	Mantenimiento
59	Promoción 59	Oferta especial para Almacen	activo	2025-02-21	2025-03-05	Almacen
60	Promoción 60	Oferta especial para Mantenimiento	activo	2025-02-20	2025-02-28	Mantenimiento
61	Promoción 61	Oferta especial para All	programado	2025-02-18	2025-03-02	All
62	Promoción 62	Oferta especial para Mantenimiento	inactivo	2025-02-14	2025-03-09	Mantenimiento
63	Promoción 63	Oferta especial para Seguridad	inactivo	2025-02-16	2025-03-04	Seguridad
64	Promoción 64	Oferta especial para All	inactivo	2025-02-18	2025-03-01	All
65	Promoción 65	Oferta especial para Cocina	inactivo	2025-02-16	2025-03-02	Cocina
66	Promoción 66	Oferta especial para Almacen	activo	2025-02-15	2025-02-28	Almacen
67	Promoción 67	Oferta especial para Seguridad	inactivo	2025-02-19	2025-02-27	Seguridad
68	Promoción 68	Oferta especial para All	inactivo	2025-02-20	2025-03-11	All
69	Promoción 69	Oferta especial para Mantenimiento	programado	2025-02-13	2025-03-13	Mantenimiento
70	Promoción 70	Oferta especial para Cocina	activo	2025-02-21	2025-02-28	Cocina
71	Promoción 71	Oferta especial para All	inactivo	2025-02-19	2025-03-03	All
72	Promoción 72	Oferta especial para All	inactivo	2025-02-20	2025-03-10	All
73	Promoción 73	Oferta especial para Mantenimiento	inactivo	2025-02-20	2025-03-13	Mantenimiento
74	Promoción 74	Oferta especial para Mantenimiento	inactivo	2025-02-13	2025-03-14	Mantenimiento
75	Promoción 75	Oferta especial para Seguridad	activo	2025-02-19	2025-03-13	Seguridad
76	Promoción 76	Oferta especial para Almacen	programado	2025-02-18	2025-03-14	Almacen
77	Promoción 77	Oferta especial para Almacen	activo	2025-02-19	2025-03-13	Almacen
78	Promoción 78	Oferta especial para Cocina	activo	2025-02-13	2025-03-07	Cocina
79	Promoción 79	Oferta especial para Cocina	activo	2025-02-21	2025-03-07	Cocina
80	Promoción 80	Oferta especial para Mantenimiento	inactivo	2025-02-19	2025-03-12	Mantenimiento
81	Promoción 81	Oferta especial para Mantenimiento	activo	2025-02-17	2025-02-28	Mantenimiento
82	Promoción 82	Oferta especial para Mantenimiento	activo	2025-02-17	2025-03-04	Mantenimiento
83	Promoción 83	Oferta especial para Almacen	programado	2025-02-17	2025-03-14	Almacen
84	Promoción 84	Oferta especial para Mantenimiento	inactivo	2025-02-17	2025-03-05	Mantenimiento
85	Promoción 85	Oferta especial para All	inactivo	2025-02-14	2025-03-01	All
86	Promoción 86	Oferta especial para Cocina	activo	2025-02-12	2025-03-06	Cocina
87	Promoción 87	Oferta especial para Seguridad	inactivo	2025-02-17	2025-03-04	Seguridad
88	Promoción 88	Oferta especial para Almacen	programado	2025-02-20	2025-03-02	Almacen
89	Promoción 89	Oferta especial para Mantenimiento	activo	2025-02-13	2025-03-02	Mantenimiento
90	Promoción 90	Oferta especial para Cocina	activo	2025-02-12	2025-03-12	Cocina
91	Promoción 91	Oferta especial para Mantenimiento	inactivo	2025-02-14	2025-03-09	Mantenimiento
92	Promoción 92	Oferta especial para All	activo	2025-02-18	2025-03-13	All
93	Promoción 93	Oferta especial para Mantenimiento	activo	2025-02-20	2025-03-03	Mantenimiento
94	Promoción 94	Oferta especial para Cocina	programado	2025-02-15	2025-03-11	Cocina
95	Promoción 95	Oferta especial para All	activo	2025-02-14	2025-03-02	All
96	Promoción 96	Oferta especial para Seguridad	programado	2025-02-17	2025-03-04	Seguridad
97	Promoción 97	Oferta especial para All	activo	2025-02-20	2025-03-12	All
98	Promoción 98	Oferta especial para All	inactivo	2025-02-19	2025-03-03	All
99	Promoción 99	Oferta especial para Mantenimiento	activo	2025-02-12	2025-03-13	Mantenimiento
100	Promoción 100	Oferta especial para Seguridad	inactivo	2025-02-14	2025-03-14	Seguridad
\.


--
-- TOC entry 4205 (class 0 OID 29282)
-- Dependencies: 291
-- Data for Name: checkin_checkout_records; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.checkin_checkout_records (id_record, id_employee, action, action_type, record_date, record_time, auth_method) FROM stdin;
1	11	checkout	security	2025-01-30	02:04:03.163941	QR
2	11	checkin	security	2025-01-27	03:05:26.163941	biometría
3	11	checkin	security	2025-01-30	02:39:29.163941	biometría
4	12	checkin	security	2025-02-04	03:01:26.163941	biometría
5	12	checkout	security	2025-01-29	03:08:56.163941	biometría
6	12	checkin	security	2025-02-12	02:54:34.163941	NFC
7	13	checkin	security	2025-02-21	03:44:17.163941	NFC
8	13	checkin	security	2025-01-23	03:38:27.163941	biometría
9	13	checkout	security	2025-02-05	03:02:48.163941	biometría
10	14	checkout	security	2025-02-03	02:54:15.163941	NFC
11	14	checkin	security	2025-02-12	03:12:58.163941	QR
12	14	checkout	security	2025-02-14	02:05:43.163941	QR
13	15	checkin	security	2025-02-13	02:36:16.163941	biometría
14	15	checkin	security	2025-02-11	02:15:40.163941	QR
15	15	checkout	security	2025-02-15	02:14:07.163941	NFC
16	16	checkin	security	2025-01-28	03:42:15.163941	NFC
17	16	checkout	security	2025-01-24	03:01:15.163941	QR
18	16	checkout	security	2025-02-17	03:08:37.163941	NFC
19	17	checkout	security	2025-02-06	02:38:31.163941	NFC
20	17	checkout	security	2025-02-04	03:01:34.163941	QR
21	17	checkout	security	2025-02-12	03:29:02.163941	biometría
22	18	checkout	security	2025-01-26	02:09:45.163941	QR
23	18	checkout	security	2025-02-01	03:47:45.163941	biometría
24	18	checkout	security	2025-02-11	02:21:39.163941	QR
25	19	checkout	security	2025-02-11	03:21:34.163941	NFC
26	19	checkout	security	2025-02-18	03:43:32.163941	biometría
27	19	checkout	security	2025-02-07	03:56:04.163941	biometría
28	20	checkout	security	2025-02-01	02:25:52.163941	QR
29	20	checkout	security	2025-02-11	03:11:59.163941	NFC
30	20	checkin	security	2025-02-12	02:21:55.163941	QR
31	21	checkin	security	2025-01-25	03:51:33.163941	NFC
32	21	checkin	security	2025-02-15	02:07:17.163941	biometría
33	21	checkin	security	2025-02-12	02:48:54.163941	biometría
34	22	checkin	security	2025-02-14	02:08:04.163941	NFC
35	22	checkin	security	2025-02-06	03:52:02.163941	QR
36	22	checkin	security	2025-02-18	03:23:45.163941	QR
37	23	checkin	security	2025-02-02	02:33:35.163941	QR
38	23	checkout	security	2025-02-19	02:34:49.163941	QR
39	23	checkout	security	2025-02-18	03:49:22.163941	biometría
40	24	checkin	security	2025-02-02	03:34:22.163941	biometría
41	24	checkin	security	2025-02-12	03:11:38.163941	QR
42	24	checkout	security	2025-02-21	02:54:31.163941	biometría
43	25	checkin	security	2025-01-26	03:37:36.163941	NFC
44	25	checkout	security	2025-02-18	03:50:47.163941	QR
45	25	checkout	security	2025-02-19	03:59:00.163941	biometría
46	26	checkout	security	2025-02-09	03:07:56.163941	QR
47	26	checkin	security	2025-01-29	03:19:06.163941	QR
48	26	checkin	security	2025-02-12	02:02:42.163941	QR
49	27	checkin	security	2025-02-18	02:38:52.163941	QR
50	27	checkout	security	2025-02-03	02:31:39.163941	NFC
51	27	checkin	security	2025-02-20	03:55:25.163941	NFC
52	28	checkin	security	2025-02-20	03:03:40.163941	biometría
53	28	checkout	security	2025-01-23	02:53:44.163941	QR
54	28	checkout	security	2025-02-20	02:17:43.163941	QR
55	29	checkout	security	2025-02-07	03:04:00.163941	biometría
56	29	checkout	security	2025-02-08	02:29:51.163941	biometría
57	29	checkout	security	2025-02-04	03:21:43.163941	QR
58	30	checkout	security	2025-02-05	03:20:44.163941	biometría
59	30	checkin	security	2025-01-23	02:46:55.163941	biometría
60	30	checkout	security	2025-02-10	03:32:26.163941	biometría
61	31	checkin	security	2025-01-23	03:18:46.163941	NFC
62	31	checkin	security	2025-01-24	02:45:30.163941	biometría
63	31	checkout	security	2025-02-16	02:19:10.163941	NFC
64	32	checkin	security	2025-02-13	03:13:40.163941	NFC
65	32	checkin	security	2025-01-23	02:29:53.163941	QR
66	32	checkin	security	2025-02-10	03:47:04.163941	QR
67	33	checkin	security	2025-02-19	03:23:20.163941	biometría
68	33	checkout	security	2025-01-25	03:30:53.163941	NFC
69	33	checkin	security	2025-01-27	03:01:49.163941	NFC
70	34	checkout	security	2025-02-02	03:05:42.163941	QR
71	34	checkin	security	2025-02-12	03:15:23.163941	NFC
72	34	checkout	security	2025-01-25	02:17:11.163941	NFC
73	35	checkin	security	2025-02-15	03:35:29.163941	biometría
74	35	checkin	security	2025-02-15	02:33:27.163941	NFC
75	35	checkin	security	2025-02-19	03:48:54.163941	NFC
76	36	checkout	security	2025-02-03	02:53:32.163941	biometría
77	36	checkout	security	2025-02-09	02:10:31.163941	QR
78	36	checkin	security	2025-01-25	03:57:25.163941	QR
79	37	checkin	security	2025-02-15	03:40:26.163941	NFC
80	37	checkin	security	2025-02-10	02:13:24.163941	QR
81	37	checkin	security	2025-02-03	02:32:05.163941	NFC
82	38	checkin	security	2025-01-30	03:34:51.163941	biometría
83	38	checkout	security	2025-01-30	03:46:42.163941	QR
84	38	checkin	security	2025-01-24	03:44:51.163941	NFC
85	39	checkin	security	2025-01-28	03:34:17.163941	NFC
86	39	checkout	security	2025-01-28	02:01:36.163941	NFC
87	39	checkout	security	2025-02-21	03:57:06.163941	QR
88	40	checkout	security	2025-02-06	02:37:15.163941	QR
89	40	checkout	security	2025-01-31	02:52:31.163941	NFC
90	40	checkout	security	2025-02-04	02:02:04.163941	NFC
91	41	checkout	security	2025-02-05	03:30:35.163941	QR
92	41	checkin	security	2025-02-02	02:05:43.163941	QR
93	41	checkout	security	2025-01-26	03:40:06.163941	QR
94	42	checkin	security	2025-01-31	02:09:44.163941	NFC
95	42	checkout	security	2025-02-06	02:42:07.163941	NFC
96	42	checkin	security	2025-02-03	03:06:49.163941	NFC
97	43	checkin	security	2025-02-09	02:17:28.163941	biometría
98	43	checkin	security	2025-02-04	03:08:37.163941	NFC
99	43	checkin	security	2025-02-10	03:08:47.163941	QR
100	44	checkin	security	2025-01-28	02:35:35.163941	QR
101	44	checkout	security	2025-02-11	02:29:17.163941	NFC
102	44	checkout	security	2025-01-31	02:12:36.163941	NFC
103	45	checkin	security	2025-02-21	03:22:12.163941	NFC
104	45	checkin	security	2025-01-30	03:24:29.163941	biometría
105	45	checkin	security	2025-02-09	03:04:32.163941	biometría
106	46	checkout	security	2025-01-25	02:46:53.163941	biometría
107	46	checkin	security	2025-02-09	02:58:56.163941	NFC
108	46	checkin	security	2025-02-21	02:15:24.163941	biometría
109	47	checkout	security	2025-01-24	03:48:42.163941	biometría
110	47	checkout	security	2025-02-17	03:50:09.163941	NFC
111	47	checkin	security	2025-02-20	03:33:16.163941	QR
112	48	checkout	security	2025-01-24	03:02:54.163941	biometría
113	48	checkin	security	2025-01-23	03:52:56.163941	QR
114	48	checkin	security	2025-01-28	02:05:35.163941	biometría
115	49	checkout	security	2025-02-06	03:53:02.163941	biometría
116	49	checkout	security	2025-02-15	02:03:15.163941	QR
117	49	checkout	security	2025-02-18	03:47:57.163941	NFC
118	50	checkout	security	2025-02-09	03:30:32.163941	biometría
119	50	checkout	security	2025-02-21	02:41:14.163941	QR
120	50	checkout	security	2025-01-23	03:52:20.163941	biometría
121	51	checkout	security	2025-01-23	02:18:42.163941	biometría
122	51	checkin	security	2025-02-20	02:13:18.163941	biometría
123	51	checkout	security	2025-02-17	03:24:03.163941	biometría
124	52	checkin	security	2025-01-26	03:10:52.163941	QR
125	52	checkout	security	2025-02-21	02:55:43.163941	NFC
126	52	checkout	security	2025-02-06	02:55:16.163941	NFC
127	53	checkout	security	2025-01-25	02:59:02.163941	QR
128	53	checkout	security	2025-01-24	03:10:00.163941	NFC
129	53	checkin	security	2025-02-19	02:53:14.163941	NFC
130	54	checkin	security	2025-01-25	02:29:56.163941	QR
131	54	checkin	security	2025-01-24	02:57:08.163941	biometría
132	54	checkin	security	2025-02-18	03:29:23.163941	biometría
133	55	checkin	security	2025-02-09	03:22:02.163941	NFC
134	55	checkout	security	2025-02-15	03:15:52.163941	biometría
135	55	checkout	security	2025-02-16	02:27:20.163941	QR
136	56	checkout	security	2025-02-20	03:32:53.163941	NFC
137	56	checkin	security	2025-01-27	03:14:23.163941	NFC
138	56	checkin	security	2025-02-11	02:16:05.163941	QR
139	57	checkin	security	2025-02-01	03:37:56.163941	QR
140	57	checkin	security	2025-01-28	02:37:48.163941	NFC
141	57	checkout	security	2025-02-02	03:59:21.163941	biometría
142	58	checkout	security	2025-01-29	02:30:28.163941	QR
143	58	checkout	security	2025-01-29	03:52:58.163941	NFC
144	58	checkin	security	2025-01-24	02:29:28.163941	NFC
145	59	checkin	security	2025-02-18	03:00:10.163941	NFC
146	59	checkin	security	2025-01-28	02:30:01.163941	NFC
147	59	checkout	security	2025-02-12	02:50:18.163941	biometría
148	60	checkout	security	2025-01-27	03:41:22.163941	NFC
149	60	checkin	security	2025-01-23	02:19:22.163941	NFC
150	60	checkin	security	2025-01-26	02:21:30.163941	biometría
151	61	checkin	security	2025-01-25	03:05:02.163941	biometría
152	61	checkin	security	2025-02-03	02:44:17.163941	NFC
153	61	checkout	security	2025-02-02	03:03:28.163941	NFC
154	62	checkin	security	2025-02-06	03:48:43.163941	biometría
155	62	checkout	security	2025-02-16	02:04:01.163941	NFC
156	62	checkin	security	2025-02-01	02:32:58.163941	QR
157	63	checkin	security	2025-02-19	02:05:20.163941	QR
158	63	checkin	security	2025-01-30	02:46:40.163941	QR
159	63	checkout	security	2025-02-07	03:12:07.163941	QR
160	64	checkin	security	2025-02-01	02:54:47.163941	biometría
161	64	checkin	security	2025-02-01	02:51:32.163941	biometría
162	64	checkin	security	2025-01-24	02:05:18.163941	QR
163	65	checkout	security	2025-01-24	02:08:07.163941	NFC
164	65	checkin	security	2025-02-11	02:08:03.163941	QR
165	65	checkout	security	2025-02-03	03:29:35.163941	NFC
166	66	checkout	security	2025-02-03	02:21:50.163941	QR
167	66	checkin	security	2025-02-19	03:41:04.163941	biometría
168	66	checkin	security	2025-02-02	02:15:41.163941	QR
169	67	checkout	security	2025-01-31	03:48:57.163941	QR
170	67	checkout	security	2025-02-21	02:22:53.163941	NFC
171	67	checkin	security	2025-02-10	03:11:21.163941	NFC
172	68	checkout	security	2025-02-07	02:59:45.163941	NFC
173	68	checkin	security	2025-02-08	02:03:07.163941	biometría
174	68	checkin	security	2025-01-23	03:56:26.163941	biometría
175	69	checkin	security	2025-02-16	03:46:41.163941	NFC
176	69	checkin	security	2025-01-25	02:16:58.163941	QR
177	69	checkout	security	2025-02-16	03:17:31.163941	QR
178	70	checkout	security	2025-02-17	02:18:26.163941	QR
179	70	checkin	security	2025-02-05	02:06:14.163941	QR
180	70	checkout	security	2025-02-05	02:27:53.163941	biometría
181	71	checkout	security	2025-01-29	03:05:06.163941	biometría
182	71	checkin	security	2025-01-23	02:07:42.163941	biometría
183	71	checkin	security	2025-02-01	02:20:23.163941	NFC
184	72	checkin	security	2025-02-04	02:42:56.163941	QR
185	72	checkin	security	2025-02-16	03:10:50.163941	biometría
186	72	checkout	security	2025-02-17	03:55:45.163941	NFC
187	73	checkout	security	2025-02-16	03:04:49.163941	biometría
188	73	checkin	security	2025-02-05	03:00:19.163941	QR
189	73	checkin	security	2025-02-20	02:58:41.163941	biometría
190	74	checkin	security	2025-02-14	03:50:14.163941	QR
191	74	checkin	security	2025-02-19	03:59:35.163941	QR
192	74	checkin	security	2025-01-28	02:19:31.163941	biometría
193	75	checkout	security	2025-02-11	02:39:37.163941	NFC
194	75	checkin	security	2025-01-26	03:52:14.163941	NFC
195	75	checkin	security	2025-02-03	03:40:53.163941	QR
196	76	checkout	security	2025-02-09	02:22:30.163941	QR
197	76	checkout	security	2025-02-20	03:57:48.163941	biometría
198	76	checkin	security	2025-02-01	02:53:32.163941	NFC
199	77	checkin	security	2025-02-05	02:14:04.163941	biometría
200	77	checkin	security	2025-02-13	03:02:42.163941	NFC
201	77	checkout	security	2025-02-10	02:43:40.163941	biometría
202	78	checkin	security	2025-02-08	02:49:43.163941	biometría
203	78	checkin	security	2025-02-07	02:56:28.163941	NFC
204	78	checkin	security	2025-02-11	03:25:09.163941	biometría
205	79	checkin	security	2025-01-29	03:12:45.163941	biometría
206	79	checkout	security	2025-02-16	02:11:50.163941	QR
207	79	checkin	security	2025-02-06	02:24:52.163941	QR
208	80	checkout	security	2025-02-01	03:32:08.163941	QR
209	80	checkin	security	2025-02-02	03:18:47.163941	NFC
210	80	checkin	security	2025-02-10	03:30:57.163941	biometría
211	81	checkin	security	2025-01-27	02:53:49.163941	QR
212	81	checkin	security	2025-02-03	02:07:23.163941	NFC
213	81	checkin	security	2025-01-23	02:33:08.163941	biometría
214	82	checkin	security	2025-01-23	03:01:52.163941	biometría
215	82	checkin	security	2025-01-30	02:16:40.163941	biometría
216	82	checkout	security	2025-02-18	02:13:01.163941	QR
217	83	checkin	security	2025-02-07	03:42:09.163941	biometría
218	83	checkout	security	2025-02-01	03:09:56.163941	biometría
219	83	checkin	security	2025-01-23	02:37:53.163941	biometría
220	84	checkout	security	2025-01-26	03:43:13.163941	NFC
221	84	checkout	security	2025-02-09	03:11:44.163941	biometría
222	84	checkin	security	2025-02-07	02:01:24.163941	NFC
223	85	checkin	security	2025-02-08	03:00:22.163941	biometría
224	85	checkout	security	2025-02-19	03:27:42.163941	biometría
225	85	checkout	security	2025-02-18	02:53:30.163941	QR
226	86	checkout	security	2025-02-21	03:07:07.163941	biometría
227	86	checkout	security	2025-01-31	03:57:13.163941	QR
228	86	checkin	security	2025-01-27	03:45:46.163941	biometría
229	87	checkout	security	2025-02-15	03:07:30.163941	QR
230	87	checkin	security	2025-02-17	02:17:13.163941	QR
231	87	checkout	security	2025-02-12	03:16:36.163941	QR
232	88	checkin	security	2025-02-14	02:07:50.163941	NFC
233	88	checkin	security	2025-02-19	02:30:02.163941	NFC
234	88	checkout	security	2025-02-06	02:16:37.163941	QR
235	89	checkin	security	2025-02-11	03:22:42.163941	biometría
236	89	checkout	security	2025-01-23	03:25:11.163941	biometría
237	89	checkout	security	2025-02-09	02:09:42.163941	QR
238	90	checkin	security	2025-01-30	03:45:53.163941	QR
239	90	checkin	security	2025-01-27	03:37:32.163941	biometría
240	90	checkout	security	2025-02-03	02:16:47.163941	QR
241	91	checkout	security	2025-01-29	03:50:22.163941	NFC
242	91	checkout	security	2025-02-01	02:27:06.163941	NFC
243	91	checkin	security	2025-02-14	03:36:32.163941	QR
244	92	checkin	security	2025-01-28	02:46:23.163941	NFC
245	92	checkout	security	2025-02-10	02:37:14.163941	NFC
246	92	checkin	security	2025-02-09	03:45:03.163941	QR
247	93	checkout	security	2025-02-21	02:32:37.163941	NFC
248	93	checkout	security	2025-02-11	03:43:16.163941	QR
249	93	checkin	security	2025-02-07	03:14:02.163941	QR
250	94	checkout	security	2025-02-16	03:51:53.163941	biometría
251	94	checkout	security	2025-01-27	02:11:10.163941	NFC
252	94	checkout	security	2025-02-20	03:31:49.163941	QR
253	95	checkin	security	2025-02-12	02:31:05.163941	QR
254	95	checkin	security	2025-02-05	02:24:00.163941	NFC
255	95	checkout	security	2025-02-17	03:29:48.163941	NFC
256	96	checkin	security	2025-02-03	02:00:43.163941	QR
257	96	checkout	security	2025-02-11	02:28:47.163941	biometría
258	96	checkout	security	2025-02-01	02:24:19.163941	QR
259	97	checkin	security	2025-01-29	02:50:18.163941	QR
260	97	checkout	security	2025-02-01	03:35:16.163941	QR
261	97	checkout	security	2025-02-11	03:33:33.163941	NFC
262	98	checkout	security	2025-01-29	02:25:40.163941	biometría
263	98	checkout	security	2025-01-31	03:47:55.163941	QR
264	98	checkout	security	2025-01-25	02:13:04.163941	QR
265	99	checkin	security	2025-01-27	02:19:04.163941	QR
266	99	checkin	security	2025-01-23	03:26:18.163941	biometría
267	99	checkout	security	2025-02-12	03:35:20.163941	NFC
268	100	checkout	security	2025-02-14	02:28:32.163941	QR
269	100	checkin	security	2025-02-20	02:26:51.163941	QR
270	100	checkout	security	2025-02-08	02:18:55.163941	QR
271	101	checkout	security	2025-02-10	03:06:13.163941	biometría
272	101	checkin	security	2025-02-14	02:15:34.163941	QR
273	101	checkout	security	2025-02-15	02:54:09.163941	QR
274	102	checkin	security	2025-02-10	02:06:27.163941	biometría
275	102	checkin	security	2025-02-17	02:24:13.163941	NFC
276	102	checkout	security	2025-02-16	02:39:45.163941	QR
277	103	checkout	security	2025-01-27	03:28:31.163941	biometría
278	103	checkout	security	2025-02-03	02:58:01.163941	biometría
279	103	checkout	security	2025-01-23	03:00:50.163941	QR
280	104	checkout	security	2025-02-15	02:38:18.163941	QR
281	104	checkin	security	2025-02-11	03:32:12.163941	biometría
282	104	checkout	security	2025-01-28	03:38:41.163941	biometría
283	105	checkout	security	2025-01-30	03:28:05.163941	biometría
284	105	checkin	security	2025-01-26	03:07:37.163941	biometría
285	105	checkout	security	2025-02-04	02:28:18.163941	NFC
286	106	checkin	security	2025-02-15	02:12:16.163941	biometría
287	106	checkin	security	2025-02-13	02:13:20.163941	biometría
288	106	checkout	security	2025-02-09	03:22:42.163941	QR
289	107	checkin	security	2025-02-05	03:25:59.163941	NFC
290	107	checkout	security	2025-01-26	03:53:13.163941	QR
291	107	checkout	security	2025-01-24	03:14:17.163941	QR
292	108	checkout	security	2025-02-07	03:44:11.163941	biometría
293	108	checkout	security	2025-02-20	02:33:06.163941	NFC
294	108	checkin	security	2025-01-28	02:55:54.163941	QR
295	109	checkin	security	2025-02-17	02:18:04.163941	QR
296	109	checkin	security	2025-02-05	03:32:38.163941	biometría
297	109	checkin	security	2025-01-27	03:40:36.163941	NFC
298	110	checkin	security	2025-01-26	03:37:54.163941	QR
299	110	checkin	security	2025-02-16	02:02:27.163941	NFC
300	110	checkout	security	2025-01-25	02:35:18.163941	NFC
\.


--
-- TOC entry 4215 (class 0 OID 29362)
-- Dependencies: 301
-- Data for Name: daily_attendancecanteen; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.daily_attendancecanteen (id_record, id_employee, employeename, department, checkin_time, checkout_time, record_date, came_in) FROM stdin;
1	11	Juan Pérez	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
2	12	María López	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
3	13	Pedro Ramírez	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
4	14	Lucía Fernández	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
5	15	Carlos González	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
6	16	Ana Torres	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
7	17	Roberto Gómez	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
8	18	Laura Sánchez	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
9	19	Luis Morales	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
10	20	Elena Castillo	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
11	21	Fernando Herrera	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
12	22	Isabel Méndez	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
13	23	Gabriel Ortega	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
14	24	Andrea Rojas	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
15	25	Daniel Castro	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
16	26	Rosa Vargas	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
17	27	Miguel Soto	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
18	28	Patricia León	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
19	29	Javier Suárez	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
20	30	Carolina Núñez	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
21	31	José Martínez	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
22	32	Sofía Delgado	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
23	33	Ricardo Pineda	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
24	34	Valeria Estrada	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
25	35	Hugo Villalobos	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
26	36	Beatriz Maldonado	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
27	37	Alfredo Mendoza	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
28	38	Diana Ríos	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
29	39	Francisco Navarro	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
30	40	Alejandra Guzmán	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
31	41	Oscar Domínguez	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
32	42	Carmen Silva	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
33	43	Raúl Herrera	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
34	44	Estefanía Vargas	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
35	45	Diego Morales	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
36	46	Natalia Fernández	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
37	47	Manuel Gutiérrez	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
38	48	Victoria Castro	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
39	49	Cristian Salinas	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
40	50	Marta Cáceres	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
41	51	Rodrigo Peña	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
42	52	Daniela Aguilar	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
43	53	Gustavo Vázquez	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
44	54	Fabiola Sandoval	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
45	55	Emiliano Rivera	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
46	56	Luciana Pacheco	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
47	57	Federico Ayala	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
48	58	Paula Montes	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
49	59	Leonardo Figueroa	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
50	60	Mariana Bustos	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
51	61	Eduardo Cabrera	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
52	62	Ximena Arce	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
53	63	Sebastián Ibarra	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
54	64	Juliana Meza	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
55	65	Adrián Rocha	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
56	66	Claudia Tapia	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
57	67	Enrique Escobar	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
58	68	Florencia Méndez	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
59	69	Camilo Espinoza	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
60	70	Antonella Benítez	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
61	71	Andrés Palacios	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
62	72	Camila Rivas	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
63	73	Tomás Aguirre	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
64	74	Eva Soto	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
65	75	Héctor Valenzuela	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
66	76	Isabella Contreras	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
67	77	Bruno Carrasco	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
68	78	Regina Vera	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
69	79	Pablo Gallardo	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
70	80	Agustina Cárdenas	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
71	81	Mateo Calderón	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
72	82	Fernanda Vargas	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
73	83	Santiago Fuentes	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
74	84	Martina Castro	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
75	85	Felipe Muñoz	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
76	86	Renata Herrera	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
77	87	Agustín Guzmán	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
78	88	Josefa Reyes	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
79	89	Maximiliano Salazar	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
80	90	Abril Medina	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
81	91	Vicente Solís	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
82	92	Antonia Parra	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
83	93	Benjamín Vidal	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
84	94	Constanza Torres	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
85	95	Joaquín Rojas	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
86	96	Catalina Peña	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
87	97	Ignacio Pizarro	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
88	98	Emma Orellana	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
89	99	Axel Farias	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
90	100	Anaís Yáñez	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
91	101	Lautaro Leiva	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
92	102	Emily Tapia	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
93	103	Bastián Navarro	Recepción	03:06:34.225763	04:06:34.225763	2025-02-22	t
94	104	Josefina Espinoza	Administración	03:06:34.225763	04:06:34.225763	2025-02-22	t
95	105	Simón Figueroa	Ama de llaves	03:06:34.225763	04:06:34.225763	2025-02-22	t
96	106	Amanda Molina	Alimentos y Bebidas	03:06:34.225763	04:06:34.225763	2025-02-22	t
97	107	Damián Álvarez	Mantenimiento	03:06:34.225763	04:06:34.225763	2025-02-22	t
98	108	Maite Ramírez	Seguridad	03:06:34.225763	04:06:34.225763	2025-02-22	t
99	109	Luciano Araya	Ventas	03:06:34.225763	04:06:34.225763	2025-02-22	t
100	110	Bianca Herrera	RRHH	03:06:34.225763	04:06:34.225763	2025-02-22	t
\.


--
-- TOC entry 4213 (class 0 OID 29343)
-- Dependencies: 299
-- Data for Name: daily_attendancesecurity; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.daily_attendancesecurity (id_record, id_employee, employeename, department, checkin_time, checkout_time, record_date, justified, came_in) FROM stdin;
1	11	Juan Pérez	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
2	12	María López	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
3	13	Pedro Ramírez	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
4	14	Lucía Fernández	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
5	15	Carlos González	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
6	16	Ana Torres	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
7	17	Roberto Gómez	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
8	18	Laura Sánchez	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
9	19	Luis Morales	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
10	20	Elena Castillo	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
11	21	Fernando Herrera	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
12	22	Isabel Méndez	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
13	23	Gabriel Ortega	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
14	24	Andrea Rojas	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
15	25	Daniel Castro	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
16	26	Rosa Vargas	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
17	27	Miguel Soto	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
18	28	Patricia León	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
19	29	Javier Suárez	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
20	30	Carolina Núñez	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
21	31	José Martínez	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
22	32	Sofía Delgado	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
23	33	Ricardo Pineda	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
24	34	Valeria Estrada	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
25	35	Hugo Villalobos	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
26	36	Beatriz Maldonado	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
27	37	Alfredo Mendoza	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
28	38	Diana Ríos	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
29	39	Francisco Navarro	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
30	40	Alejandra Guzmán	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
31	41	Oscar Domínguez	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
32	42	Carmen Silva	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
33	43	Raúl Herrera	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
34	44	Estefanía Vargas	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
35	45	Diego Morales	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
36	46	Natalia Fernández	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
37	47	Manuel Gutiérrez	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
38	48	Victoria Castro	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
39	49	Cristian Salinas	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
40	50	Marta Cáceres	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
41	51	Rodrigo Peña	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
42	52	Daniela Aguilar	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
43	53	Gustavo Vázquez	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
44	54	Fabiola Sandoval	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
45	55	Emiliano Rivera	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
46	56	Luciana Pacheco	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
47	57	Federico Ayala	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
48	58	Paula Montes	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
49	59	Leonardo Figueroa	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
50	60	Mariana Bustos	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
51	61	Eduardo Cabrera	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
52	62	Ximena Arce	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
53	63	Sebastián Ibarra	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
54	64	Juliana Meza	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
55	65	Adrián Rocha	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
56	66	Claudia Tapia	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
57	67	Enrique Escobar	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
58	68	Florencia Méndez	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
59	69	Camilo Espinoza	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
60	70	Antonella Benítez	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
61	71	Andrés Palacios	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
62	72	Camila Rivas	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
63	73	Tomás Aguirre	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
64	74	Eva Soto	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
65	75	Héctor Valenzuela	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
66	76	Isabella Contreras	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
67	77	Bruno Carrasco	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
68	78	Regina Vera	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
69	79	Pablo Gallardo	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
70	80	Agustina Cárdenas	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
71	81	Mateo Calderón	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
72	82	Fernanda Vargas	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
73	83	Santiago Fuentes	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
74	84	Martina Castro	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
75	85	Felipe Muñoz	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
76	86	Renata Herrera	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
77	87	Agustín Guzmán	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
78	88	Josefa Reyes	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
79	89	Maximiliano Salazar	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
80	90	Abril Medina	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
81	91	Vicente Solís	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
82	92	Antonia Parra	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
83	93	Benjamín Vidal	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
84	94	Constanza Torres	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
85	95	Joaquín Rojas	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
86	96	Catalina Peña	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
87	97	Ignacio Pizarro	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
88	98	Emma Orellana	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
89	99	Axel Farias	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
90	100	Anaís Yáñez	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
91	101	Lautaro Leiva	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
92	102	Emily Tapia	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
93	103	Bastián Navarro	Recepción	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
94	104	Josefina Espinoza	Administración	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
95	105	Simón Figueroa	Ama de llaves	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
96	106	Amanda Molina	Alimentos y Bebidas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
97	107	Damián Álvarez	Mantenimiento	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
98	108	Maite Ramírez	Seguridad	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
99	109	Luciano Araya	Ventas	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
100	110	Bianca Herrera	RRHH	20:04:47.741993	04:04:47.741993	2025-02-22	f	t
\.


--
-- TOC entry 4199 (class 0 OID 29230)
-- Dependencies: 285
-- Data for Name: departments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.departments (id_department, name_department) FROM stdin;
1	Administración
2	Ama de llaves
3	Alimentos y Bebidas
4	Mantenimiento
5	Seguridad
6	Ventas
7	RRHH
8	Recepción
\.


--
-- TOC entry 4203 (class 0 OID 29255)
-- Dependencies: 289
-- Data for Name: employees; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.employees (id_employee, employeename, email, department, subdepartment, phonenumber, address, status, password, role, force_password_reset, deleted_at, qr_enabled, fingerprint_data, nfc_id) FROM stdin;
11	Juan Pérez	juan.pérez@empresa.com	4	\N	555-1011	Calle 11, Ciudad	activo	hashed_password_11	Employee	f	\N	t	\N	\N
12	María López	maría.lópez@empresa.com	5	\N	555-1012	Calle 12, Ciudad	activo	hashed_password_12	Employee	f	\N	t	\N	NFC_12
13	Pedro Ramírez	pedro.ramírez@empresa.com	6	\N	555-1013	Calle 13, Ciudad	activo	hashed_password_13	Employee	f	\N	t	\N	\N
14	Lucía Fernández	lucía.fernández@empresa.com	7	\N	555-1014	Calle 14, Ciudad	activo	hashed_password_14	Employee	f	\N	t	\N	\N
15	Carlos González	carlos.gonzález@empresa.com	8	\N	555-1015	Calle 15, Ciudad	activo	hashed_password_15	Employee	f	\N	t	\N	\N
16	Ana Torres	ana.torres@empresa.com	1	\N	555-1016	Calle 16, Ciudad	activo	hashed_password_16	Employee	f	\N	t	\N	NFC_16
17	Roberto Gómez	roberto.gómez@empresa.com	2	\N	555-1017	Calle 17, Ciudad	activo	hashed_password_17	Employee	f	\N	t	\N	\N
18	Laura Sánchez	laura.sánchez@empresa.com	3	\N	555-1018	Calle 18, Ciudad	activo	hashed_password_18	Employee	f	\N	t	\N	\N
19	Luis Morales	luis.morales@empresa.com	4	\N	555-1019	Calle 19, Ciudad	activo	hashed_password_19	Employee	f	\N	t	\N	NFC_19
20	Elena Castillo	elena.castillo@empresa.com	5	\N	555-1020	Calle 20, Ciudad	activo	hashed_password_20	Employee	f	\N	t	\N	\N
21	Fernando Herrera	fernando.herrera@empresa.com	6	\N	555-1021	Calle 21, Ciudad	activo	hashed_password_21	Employee	f	\N	t	\N	NFC_21
22	Isabel Méndez	isabel.méndez@empresa.com	7	\N	555-1022	Calle 22, Ciudad	activo	hashed_password_22	Employee	f	\N	t	\N	NFC_22
23	Gabriel Ortega	gabriel.ortega@empresa.com	8	\N	555-1023	Calle 23, Ciudad	activo	hashed_password_23	Employee	f	\N	t	\N	\N
24	Andrea Rojas	andrea.rojas@empresa.com	1	\N	555-1024	Calle 24, Ciudad	activo	hashed_password_24	Employee	f	\N	t	\N	NFC_24
25	Daniel Castro	daniel.castro@empresa.com	2	\N	555-1025	Calle 25, Ciudad	activo	hashed_password_25	Employee	f	\N	t	\N	\N
26	Rosa Vargas	rosa.vargas@empresa.com	3	\N	555-1026	Calle 26, Ciudad	activo	hashed_password_26	Employee	f	\N	t	\N	\N
27	Miguel Soto	miguel.soto@empresa.com	4	\N	555-1027	Calle 27, Ciudad	activo	hashed_password_27	Employee	f	\N	t	\N	\N
28	Patricia León	patricia.león@empresa.com	5	\N	555-1028	Calle 28, Ciudad	activo	hashed_password_28	Employee	f	\N	t	\N	\N
29	Javier Suárez	javier.suárez@empresa.com	6	\N	555-1029	Calle 29, Ciudad	activo	hashed_password_29	Employee	f	\N	t	\N	NFC_29
30	Carolina Núñez	carolina.núñez@empresa.com	7	\N	555-1030	Calle 30, Ciudad	activo	hashed_password_30	Employee	f	\N	t	\N	\N
31	José Martínez	josé.martínez@empresa.com	8	\N	555-1031	Calle 31, Ciudad	activo	hashed_password_31	Employee	f	\N	t	\N	NFC_31
32	Sofía Delgado	sofía.delgado@empresa.com	1	\N	555-1032	Calle 32, Ciudad	activo	hashed_password_32	Employee	f	\N	t	\N	\N
33	Ricardo Pineda	ricardo.pineda@empresa.com	2	\N	555-1033	Calle 33, Ciudad	activo	hashed_password_33	Employee	f	\N	t	\N	\N
34	Valeria Estrada	valeria.estrada@empresa.com	3	\N	555-1034	Calle 34, Ciudad	activo	hashed_password_34	Employee	f	\N	t	\N	NFC_34
35	Hugo Villalobos	hugo.villalobos@empresa.com	4	\N	555-1035	Calle 35, Ciudad	activo	hashed_password_35	Employee	f	\N	t	\N	NFC_35
36	Beatriz Maldonado	beatriz.maldonado@empresa.com	5	\N	555-1036	Calle 36, Ciudad	activo	hashed_password_36	Employee	f	\N	t	\N	\N
37	Alfredo Mendoza	alfredo.mendoza@empresa.com	6	\N	555-1037	Calle 37, Ciudad	activo	hashed_password_37	Employee	f	\N	t	\N	\N
38	Diana Ríos	diana.ríos@empresa.com	7	\N	555-1038	Calle 38, Ciudad	activo	hashed_password_38	Employee	f	\N	t	\N	NFC_38
39	Francisco Navarro	francisco.navarro@empresa.com	8	\N	555-1039	Calle 39, Ciudad	activo	hashed_password_39	Employee	f	\N	t	\N	NFC_39
40	Alejandra Guzmán	alejandra.guzmán@empresa.com	1	\N	555-1040	Calle 40, Ciudad	activo	hashed_password_40	Employee	f	\N	t	\N	NFC_40
41	Oscar Domínguez	oscar.domínguez@empresa.com	2	\N	555-1041	Calle 41, Ciudad	activo	hashed_password_41	Employee	f	\N	t	\N	NFC_41
42	Carmen Silva	carmen.silva@empresa.com	3	\N	555-1042	Calle 42, Ciudad	activo	hashed_password_42	Employee	f	\N	t	\N	\N
43	Raúl Herrera	raúl.herrera@empresa.com	4	\N	555-1043	Calle 43, Ciudad	activo	hashed_password_43	Employee	f	\N	t	\N	NFC_43
44	Estefanía Vargas	estefanía.vargas@empresa.com	5	\N	555-1044	Calle 44, Ciudad	activo	hashed_password_44	Employee	f	\N	t	\N	NFC_44
45	Diego Morales	diego.morales@empresa.com	6	\N	555-1045	Calle 45, Ciudad	activo	hashed_password_45	Employee	f	\N	t	\N	\N
46	Natalia Fernández	natalia.fernández@empresa.com	7	\N	555-1046	Calle 46, Ciudad	activo	hashed_password_46	Employee	f	\N	t	\N	\N
47	Manuel Gutiérrez	manuel.gutiérrez@empresa.com	8	\N	555-1047	Calle 47, Ciudad	activo	hashed_password_47	Employee	f	\N	t	\N	\N
48	Victoria Castro	victoria.castro@empresa.com	1	\N	555-1048	Calle 48, Ciudad	activo	hashed_password_48	Employee	f	\N	t	\N	NFC_48
49	Cristian Salinas	cristian.salinas@empresa.com	2	\N	555-1049	Calle 49, Ciudad	activo	hashed_password_49	Employee	f	\N	t	\N	NFC_49
50	Marta Cáceres	marta.cáceres@empresa.com	3	\N	555-1050	Calle 50, Ciudad	activo	hashed_password_50	Employee	f	\N	t	\N	NFC_50
51	Rodrigo Peña	rodrigo.peña@empresa.com	4	\N	555-1051	Calle 51, Ciudad	activo	hashed_password_51	Employee	f	\N	t	\N	NFC_51
52	Daniela Aguilar	daniela.aguilar@empresa.com	5	\N	555-1052	Calle 52, Ciudad	activo	hashed_password_52	Employee	f	\N	t	\N	NFC_52
53	Gustavo Vázquez	gustavo.vázquez@empresa.com	6	\N	555-1053	Calle 53, Ciudad	activo	hashed_password_53	Employee	f	\N	t	\N	\N
54	Fabiola Sandoval	fabiola.sandoval@empresa.com	7	\N	555-1054	Calle 54, Ciudad	activo	hashed_password_54	Employee	f	\N	t	\N	NFC_54
55	Emiliano Rivera	emiliano.rivera@empresa.com	8	\N	555-1055	Calle 55, Ciudad	activo	hashed_password_55	Employee	f	\N	t	\N	NFC_55
56	Luciana Pacheco	luciana.pacheco@empresa.com	1	\N	555-1056	Calle 56, Ciudad	activo	hashed_password_56	Employee	f	\N	t	\N	\N
57	Federico Ayala	federico.ayala@empresa.com	2	\N	555-1057	Calle 57, Ciudad	activo	hashed_password_57	Employee	f	\N	t	\N	NFC_57
58	Paula Montes	paula.montes@empresa.com	3	\N	555-1058	Calle 58, Ciudad	activo	hashed_password_58	Employee	f	\N	t	\N	\N
59	Leonardo Figueroa	leonardo.figueroa@empresa.com	4	\N	555-1059	Calle 59, Ciudad	activo	hashed_password_59	Employee	f	\N	t	\N	NFC_59
60	Mariana Bustos	mariana.bustos@empresa.com	5	\N	555-1060	Calle 60, Ciudad	activo	hashed_password_60	Employee	f	\N	t	\N	NFC_60
61	Eduardo Cabrera	eduardo.cabrera@empresa.com	6	\N	555-1061	Calle 61, Ciudad	activo	hashed_password_61	Employee	f	\N	t	\N	NFC_61
62	Ximena Arce	ximena.arce@empresa.com	7	\N	555-1062	Calle 62, Ciudad	activo	hashed_password_62	Employee	f	\N	t	\N	\N
63	Sebastián Ibarra	sebastián.ibarra@empresa.com	8	\N	555-1063	Calle 63, Ciudad	activo	hashed_password_63	Employee	f	\N	t	\N	NFC_63
64	Juliana Meza	juliana.meza@empresa.com	1	\N	555-1064	Calle 64, Ciudad	activo	hashed_password_64	Employee	f	\N	t	\N	\N
65	Adrián Rocha	adrián.rocha@empresa.com	2	\N	555-1065	Calle 65, Ciudad	activo	hashed_password_65	Employee	f	\N	t	\N	NFC_65
66	Claudia Tapia	claudia.tapia@empresa.com	3	\N	555-1066	Calle 66, Ciudad	activo	hashed_password_66	Employee	f	\N	t	\N	NFC_66
67	Enrique Escobar	enrique.escobar@empresa.com	4	\N	555-1067	Calle 67, Ciudad	activo	hashed_password_67	Employee	f	\N	t	\N	\N
68	Florencia Méndez	florencia.méndez@empresa.com	5	\N	555-1068	Calle 68, Ciudad	activo	hashed_password_68	Employee	f	\N	t	\N	NFC_68
69	Camilo Espinoza	camilo.espinoza@empresa.com	6	\N	555-1069	Calle 69, Ciudad	activo	hashed_password_69	Employee	f	\N	t	\N	NFC_69
70	Antonella Benítez	antonella.benítez@empresa.com	7	\N	555-1070	Calle 70, Ciudad	activo	hashed_password_70	Employee	f	\N	t	\N	NFC_70
71	Andrés Palacios	andrés.palacios@empresa.com	8	\N	555-1071	Calle 71, Ciudad	activo	hashed_password_71	Employee	f	\N	t	\N	\N
72	Camila Rivas	camila.rivas@empresa.com	1	\N	555-1072	Calle 72, Ciudad	activo	hashed_password_72	Employee	f	\N	t	\N	NFC_72
73	Tomás Aguirre	tomás.aguirre@empresa.com	2	\N	555-1073	Calle 73, Ciudad	activo	hashed_password_73	Employee	f	\N	t	\N	\N
74	Eva Soto	eva.soto@empresa.com	3	\N	555-1074	Calle 74, Ciudad	activo	hashed_password_74	Employee	f	\N	t	\N	NFC_74
75	Héctor Valenzuela	héctor.valenzuela@empresa.com	4	\N	555-1075	Calle 75, Ciudad	activo	hashed_password_75	Employee	f	\N	t	\N	NFC_75
76	Isabella Contreras	isabella.contreras@empresa.com	5	\N	555-1076	Calle 76, Ciudad	activo	hashed_password_76	Employee	f	\N	t	\N	\N
77	Bruno Carrasco	bruno.carrasco@empresa.com	6	\N	555-1077	Calle 77, Ciudad	activo	hashed_password_77	Employee	f	\N	t	\N	NFC_77
78	Regina Vera	regina.vera@empresa.com	7	\N	555-1078	Calle 78, Ciudad	activo	hashed_password_78	Employee	f	\N	t	\N	NFC_78
79	Pablo Gallardo	pablo.gallardo@empresa.com	8	\N	555-1079	Calle 79, Ciudad	activo	hashed_password_79	Employee	f	\N	t	\N	NFC_79
80	Agustina Cárdenas	agustina.cárdenas@empresa.com	1	\N	555-1080	Calle 80, Ciudad	activo	hashed_password_80	Employee	f	\N	t	\N	NFC_80
81	Mateo Calderón	mateo.calderón@empresa.com	2	\N	555-1081	Calle 81, Ciudad	activo	hashed_password_81	Employee	f	\N	t	\N	\N
82	Fernanda Vargas	fernanda.vargas@empresa.com	3	\N	555-1082	Calle 82, Ciudad	activo	hashed_password_82	Employee	f	\N	t	\N	NFC_82
83	Santiago Fuentes	santiago.fuentes@empresa.com	4	\N	555-1083	Calle 83, Ciudad	activo	hashed_password_83	Employee	f	\N	t	\N	\N
84	Martina Castro	martina.castro@empresa.com	5	\N	555-1084	Calle 84, Ciudad	activo	hashed_password_84	Employee	f	\N	t	\N	NFC_84
85	Felipe Muñoz	felipe.muñoz@empresa.com	6	\N	555-1085	Calle 85, Ciudad	activo	hashed_password_85	Employee	f	\N	t	\N	NFC_85
86	Renata Herrera	renata.herrera@empresa.com	7	\N	555-1086	Calle 86, Ciudad	activo	hashed_password_86	Employee	f	\N	t	\N	\N
87	Agustín Guzmán	agustín.guzmán@empresa.com	8	\N	555-1087	Calle 87, Ciudad	activo	hashed_password_87	Employee	f	\N	t	\N	NFC_87
88	Josefa Reyes	josefa.reyes@empresa.com	1	\N	555-1088	Calle 88, Ciudad	activo	hashed_password_88	Employee	f	\N	t	\N	\N
89	Maximiliano Salazar	maximiliano.salazar@empresa.com	2	\N	555-1089	Calle 89, Ciudad	activo	hashed_password_89	Employee	f	\N	t	\N	NFC_89
90	Abril Medina	abril.medina@empresa.com	3	\N	555-1090	Calle 90, Ciudad	activo	hashed_password_90	Employee	f	\N	t	\N	\N
91	Vicente Solís	vicente.solís@empresa.com	4	\N	555-1091	Calle 91, Ciudad	activo	hashed_password_91	Employee	f	\N	t	\N	NFC_91
92	Antonia Parra	antonia.parra@empresa.com	5	\N	555-1092	Calle 92, Ciudad	activo	hashed_password_92	Employee	f	\N	t	\N	\N
93	Benjamín Vidal	benjamín.vidal@empresa.com	6	\N	555-1093	Calle 93, Ciudad	activo	hashed_password_93	Employee	f	\N	t	\N	NFC_93
94	Constanza Torres	constanza.torres@empresa.com	7	\N	555-1094	Calle 94, Ciudad	activo	hashed_password_94	Employee	f	\N	t	\N	\N
95	Joaquín Rojas	joaquín.rojas@empresa.com	8	\N	555-1095	Calle 95, Ciudad	activo	hashed_password_95	Employee	f	\N	t	\N	\N
96	Catalina Peña	catalina.peña@empresa.com	1	\N	555-1096	Calle 96, Ciudad	activo	hashed_password_96	Employee	f	\N	t	\N	\N
97	Ignacio Pizarro	ignacio.pizarro@empresa.com	2	\N	555-1097	Calle 97, Ciudad	activo	hashed_password_97	Employee	f	\N	t	\N	\N
98	Emma Orellana	emma.orellana@empresa.com	3	\N	555-1098	Calle 98, Ciudad	activo	hashed_password_98	Employee	f	\N	t	\N	NFC_98
99	Axel Farias	axel.farias@empresa.com	4	\N	555-1099	Calle 99, Ciudad	activo	hashed_password_99	Employee	f	\N	t	\N	\N
100	Anaís Yáñez	anaís.yáñez@empresa.com	5	\N	555-1100	Calle 100, Ciudad	activo	hashed_password_100	Employee	f	\N	t	\N	NFC_100
101	Lautaro Leiva	lautaro.leiva@empresa.com	6	\N	555-1101	Calle 101, Ciudad	activo	hashed_password_101	Employee	f	\N	t	\N	\N
102	Emily Tapia	emily.tapia@empresa.com	7	\N	555-1102	Calle 102, Ciudad	activo	hashed_password_102	Employee	f	\N	t	\N	NFC_102
103	Bastián Navarro	bastián.navarro@empresa.com	8	\N	555-1103	Calle 103, Ciudad	activo	hashed_password_103	Employee	f	\N	t	\N	NFC_103
104	Josefina Espinoza	josefina.espinoza@empresa.com	1	\N	555-1104	Calle 104, Ciudad	activo	hashed_password_104	Employee	f	\N	t	\N	NFC_104
105	Simón Figueroa	simón.figueroa@empresa.com	2	\N	555-1105	Calle 105, Ciudad	activo	hashed_password_105	Employee	f	\N	t	\N	NFC_105
106	Amanda Molina	amanda.molina@empresa.com	3	\N	555-1106	Calle 106, Ciudad	activo	hashed_password_106	Employee	f	\N	t	\N	NFC_106
107	Damián Álvarez	damián.álvarez@empresa.com	4	\N	555-1107	Calle 107, Ciudad	activo	hashed_password_107	Employee	f	\N	t	\N	NFC_107
108	Maite Ramírez	maite.ramírez@empresa.com	5	\N	555-1108	Calle 108, Ciudad	activo	hashed_password_108	Employee	f	\N	t	\N	NFC_108
109	Luciano Araya	luciano.araya@empresa.com	6	\N	555-1109	Calle 109, Ciudad	activo	hashed_password_109	Employee	f	\N	t	\N	\N
110	Bianca Herrera	bianca.herrera@empresa.com	7	\N	555-1110	Calle 110, Ciudad	activo	hashed_password_110	Employee	f	\N	t	\N	NFC_110
\.


--
-- TOC entry 4211 (class 0 OID 29327)
-- Dependencies: 297
-- Data for Name: password_reset_tokens; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.password_reset_tokens (id, id_employee, token, expiration) FROM stdin;
1	11	token_reset_11	2025-02-22 05:03:34.755925
2	12	token_reset_12	2025-02-22 05:03:34.755925
3	13	token_reset_13	2025-02-22 05:03:34.755925
4	14	token_reset_14	2025-02-22 05:03:34.755925
5	15	token_reset_15	2025-02-22 05:03:34.755925
6	16	token_reset_16	2025-02-22 05:03:34.755925
7	17	token_reset_17	2025-02-22 05:03:34.755925
8	18	token_reset_18	2025-02-22 05:03:34.755925
9	19	token_reset_19	2025-02-22 05:03:34.755925
10	20	token_reset_20	2025-02-22 05:03:34.755925
11	21	token_reset_21	2025-02-22 05:03:34.755925
12	22	token_reset_22	2025-02-22 05:03:34.755925
13	23	token_reset_23	2025-02-22 05:03:34.755925
14	24	token_reset_24	2025-02-22 05:03:34.755925
15	25	token_reset_25	2025-02-22 05:03:34.755925
16	26	token_reset_26	2025-02-22 05:03:34.755925
17	27	token_reset_27	2025-02-22 05:03:34.755925
18	28	token_reset_28	2025-02-22 05:03:34.755925
19	29	token_reset_29	2025-02-22 05:03:34.755925
20	30	token_reset_30	2025-02-22 05:03:34.755925
21	31	token_reset_31	2025-02-22 05:03:34.755925
22	32	token_reset_32	2025-02-22 05:03:34.755925
23	33	token_reset_33	2025-02-22 05:03:34.755925
24	34	token_reset_34	2025-02-22 05:03:34.755925
25	35	token_reset_35	2025-02-22 05:03:34.755925
26	36	token_reset_36	2025-02-22 05:03:34.755925
27	37	token_reset_37	2025-02-22 05:03:34.755925
28	38	token_reset_38	2025-02-22 05:03:34.755925
29	39	token_reset_39	2025-02-22 05:03:34.755925
30	40	token_reset_40	2025-02-22 05:03:34.755925
31	41	token_reset_41	2025-02-22 05:03:34.755925
32	42	token_reset_42	2025-02-22 05:03:34.755925
33	43	token_reset_43	2025-02-22 05:03:34.755925
34	44	token_reset_44	2025-02-22 05:03:34.755925
35	45	token_reset_45	2025-02-22 05:03:34.755925
36	46	token_reset_46	2025-02-22 05:03:34.755925
37	47	token_reset_47	2025-02-22 05:03:34.755925
38	48	token_reset_48	2025-02-22 05:03:34.755925
39	49	token_reset_49	2025-02-22 05:03:34.755925
40	50	token_reset_50	2025-02-22 05:03:34.755925
41	51	token_reset_51	2025-02-22 05:03:34.755925
42	52	token_reset_52	2025-02-22 05:03:34.755925
43	53	token_reset_53	2025-02-22 05:03:34.755925
44	54	token_reset_54	2025-02-22 05:03:34.755925
45	55	token_reset_55	2025-02-22 05:03:34.755925
46	56	token_reset_56	2025-02-22 05:03:34.755925
47	57	token_reset_57	2025-02-22 05:03:34.755925
48	58	token_reset_58	2025-02-22 05:03:34.755925
49	59	token_reset_59	2025-02-22 05:03:34.755925
50	60	token_reset_60	2025-02-22 05:03:34.755925
51	61	token_reset_61	2025-02-22 05:03:34.755925
52	62	token_reset_62	2025-02-22 05:03:34.755925
53	63	token_reset_63	2025-02-22 05:03:34.755925
54	64	token_reset_64	2025-02-22 05:03:34.755925
55	65	token_reset_65	2025-02-22 05:03:34.755925
56	66	token_reset_66	2025-02-22 05:03:34.755925
57	67	token_reset_67	2025-02-22 05:03:34.755925
58	68	token_reset_68	2025-02-22 05:03:34.755925
59	69	token_reset_69	2025-02-22 05:03:34.755925
60	70	token_reset_70	2025-02-22 05:03:34.755925
61	71	token_reset_71	2025-02-22 05:03:34.755925
62	72	token_reset_72	2025-02-22 05:03:34.755925
63	73	token_reset_73	2025-02-22 05:03:34.755925
64	74	token_reset_74	2025-02-22 05:03:34.755925
65	75	token_reset_75	2025-02-22 05:03:34.755925
66	76	token_reset_76	2025-02-22 05:03:34.755925
67	77	token_reset_77	2025-02-22 05:03:34.755925
68	78	token_reset_78	2025-02-22 05:03:34.755925
69	79	token_reset_79	2025-02-22 05:03:34.755925
70	80	token_reset_80	2025-02-22 05:03:34.755925
71	81	token_reset_81	2025-02-22 05:03:34.755925
72	82	token_reset_82	2025-02-22 05:03:34.755925
73	83	token_reset_83	2025-02-22 05:03:34.755925
74	84	token_reset_84	2025-02-22 05:03:34.755925
75	85	token_reset_85	2025-02-22 05:03:34.755925
76	86	token_reset_86	2025-02-22 05:03:34.755925
77	87	token_reset_87	2025-02-22 05:03:34.755925
78	88	token_reset_88	2025-02-22 05:03:34.755925
79	89	token_reset_89	2025-02-22 05:03:34.755925
80	90	token_reset_90	2025-02-22 05:03:34.755925
81	91	token_reset_91	2025-02-22 05:03:34.755925
82	92	token_reset_92	2025-02-22 05:03:34.755925
83	93	token_reset_93	2025-02-22 05:03:34.755925
84	94	token_reset_94	2025-02-22 05:03:34.755925
85	95	token_reset_95	2025-02-22 05:03:34.755925
86	96	token_reset_96	2025-02-22 05:03:34.755925
87	97	token_reset_97	2025-02-22 05:03:34.755925
88	98	token_reset_98	2025-02-22 05:03:34.755925
89	99	token_reset_99	2025-02-22 05:03:34.755925
90	100	token_reset_100	2025-02-22 05:03:34.755925
91	101	token_reset_101	2025-02-22 05:03:34.755925
92	102	token_reset_102	2025-02-22 05:03:34.755925
93	103	token_reset_103	2025-02-22 05:03:34.755925
94	104	token_reset_104	2025-02-22 05:03:34.755925
95	105	token_reset_105	2025-02-22 05:03:34.755925
96	106	token_reset_106	2025-02-22 05:03:34.755925
97	107	token_reset_107	2025-02-22 05:03:34.755925
98	108	token_reset_108	2025-02-22 05:03:34.755925
99	109	token_reset_109	2025-02-22 05:03:34.755925
100	110	token_reset_110	2025-02-22 05:03:34.755925
\.


--
-- TOC entry 4209 (class 0 OID 29316)
-- Dependencies: 295
-- Data for Name: revoked_tokens; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.revoked_tokens (id, token, revocation_date) FROM stdin;
1	revoked_token_1	2025-01-27 04:08:32.254558
2	revoked_token_2	2025-02-11 04:08:32.254558
3	revoked_token_3	2025-02-10 04:08:32.254558
4	revoked_token_4	2025-02-05 04:08:32.254558
5	revoked_token_5	2025-02-20 04:08:32.254558
6	revoked_token_6	2025-01-31 04:08:32.254558
7	revoked_token_7	2025-02-11 04:08:32.254558
8	revoked_token_8	2025-02-07 04:08:32.254558
9	revoked_token_9	2025-01-28 04:08:32.254558
10	revoked_token_10	2025-02-10 04:08:32.254558
11	revoked_token_11	2025-02-17 04:08:32.254558
12	revoked_token_12	2025-01-25 04:08:32.254558
13	revoked_token_13	2025-02-17 04:08:32.254558
14	revoked_token_14	2025-02-18 04:08:32.254558
15	revoked_token_15	2025-02-09 04:08:32.254558
16	revoked_token_16	2025-02-15 04:08:32.254558
17	revoked_token_17	2025-02-19 04:08:32.254558
18	revoked_token_18	2025-02-18 04:08:32.254558
19	revoked_token_19	2025-02-17 04:08:32.254558
20	revoked_token_20	2025-02-15 04:08:32.254558
21	revoked_token_21	2025-02-21 04:08:32.254558
22	revoked_token_22	2025-01-29 04:08:32.254558
23	revoked_token_23	2025-01-25 04:08:32.254558
24	revoked_token_24	2025-02-21 04:08:32.254558
25	revoked_token_25	2025-01-28 04:08:32.254558
26	revoked_token_26	2025-01-31 04:08:32.254558
27	revoked_token_27	2025-02-21 04:08:32.254558
28	revoked_token_28	2025-01-28 04:08:32.254558
29	revoked_token_29	2025-01-27 04:08:32.254558
30	revoked_token_30	2025-01-23 04:08:32.254558
31	revoked_token_31	2025-02-12 04:08:32.254558
32	revoked_token_32	2025-02-21 04:08:32.254558
33	revoked_token_33	2025-02-20 04:08:32.254558
34	revoked_token_34	2025-02-14 04:08:32.254558
35	revoked_token_35	2025-02-01 04:08:32.254558
36	revoked_token_36	2025-02-04 04:08:32.254558
37	revoked_token_37	2025-01-24 04:08:32.254558
38	revoked_token_38	2025-02-04 04:08:32.254558
39	revoked_token_39	2025-02-18 04:08:32.254558
40	revoked_token_40	2025-01-28 04:08:32.254558
41	revoked_token_41	2025-02-13 04:08:32.254558
42	revoked_token_42	2025-02-15 04:08:32.254558
43	revoked_token_43	2025-02-17 04:08:32.254558
44	revoked_token_44	2025-01-30 04:08:32.254558
45	revoked_token_45	2025-02-05 04:08:32.254558
46	revoked_token_46	2025-01-28 04:08:32.254558
47	revoked_token_47	2025-02-16 04:08:32.254558
48	revoked_token_48	2025-01-24 04:08:32.254558
49	revoked_token_49	2025-02-05 04:08:32.254558
50	revoked_token_50	2025-02-10 04:08:32.254558
51	revoked_token_51	2025-02-08 04:08:32.254558
52	revoked_token_52	2025-02-12 04:08:32.254558
53	revoked_token_53	2025-02-08 04:08:32.254558
54	revoked_token_54	2025-02-10 04:08:32.254558
55	revoked_token_55	2025-02-03 04:08:32.254558
56	revoked_token_56	2025-01-23 04:08:32.254558
57	revoked_token_57	2025-02-04 04:08:32.254558
58	revoked_token_58	2025-02-06 04:08:32.254558
59	revoked_token_59	2025-02-07 04:08:32.254558
60	revoked_token_60	2025-02-04 04:08:32.254558
61	revoked_token_61	2025-02-09 04:08:32.254558
62	revoked_token_62	2025-02-06 04:08:32.254558
63	revoked_token_63	2025-01-26 04:08:32.254558
64	revoked_token_64	2025-02-09 04:08:32.254558
65	revoked_token_65	2025-01-29 04:08:32.254558
66	revoked_token_66	2025-02-06 04:08:32.254558
67	revoked_token_67	2025-02-13 04:08:32.254558
68	revoked_token_68	2025-02-18 04:08:32.254558
69	revoked_token_69	2025-02-04 04:08:32.254558
70	revoked_token_70	2025-01-28 04:08:32.254558
71	revoked_token_71	2025-02-18 04:08:32.254558
72	revoked_token_72	2025-02-17 04:08:32.254558
73	revoked_token_73	2025-02-12 04:08:32.254558
74	revoked_token_74	2025-02-07 04:08:32.254558
75	revoked_token_75	2025-01-26 04:08:32.254558
76	revoked_token_76	2025-01-23 04:08:32.254558
77	revoked_token_77	2025-02-03 04:08:32.254558
78	revoked_token_78	2025-02-20 04:08:32.254558
79	revoked_token_79	2025-02-02 04:08:32.254558
80	revoked_token_80	2025-01-30 04:08:32.254558
81	revoked_token_81	2025-01-30 04:08:32.254558
82	revoked_token_82	2025-02-10 04:08:32.254558
83	revoked_token_83	2025-02-05 04:08:32.254558
84	revoked_token_84	2025-01-23 04:08:32.254558
85	revoked_token_85	2025-02-13 04:08:32.254558
86	revoked_token_86	2025-01-28 04:08:32.254558
87	revoked_token_87	2025-01-24 04:08:32.254558
88	revoked_token_88	2025-02-17 04:08:32.254558
89	revoked_token_89	2025-01-25 04:08:32.254558
90	revoked_token_90	2025-02-05 04:08:32.254558
91	revoked_token_91	2025-02-17 04:08:32.254558
92	revoked_token_92	2025-02-13 04:08:32.254558
93	revoked_token_93	2025-01-27 04:08:32.254558
94	revoked_token_94	2025-01-27 04:08:32.254558
95	revoked_token_95	2025-02-16 04:08:32.254558
96	revoked_token_96	2025-02-07 04:08:32.254558
97	revoked_token_97	2025-02-21 04:08:32.254558
98	revoked_token_98	2025-02-10 04:08:32.254558
99	revoked_token_99	2025-02-08 04:08:32.254558
100	revoked_token_100	2025-02-18 04:08:32.254558
\.


--
-- TOC entry 4201 (class 0 OID 29241)
-- Dependencies: 287
-- Data for Name: subdepartments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.subdepartments (id_subdepartment, id_department, name_subdepartment) FROM stdin;
\.


--
-- TOC entry 4195 (class 0 OID 29029)
-- Dependencies: 277
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-02-12 14:10:15
20211116045059	2025-02-12 14:10:16
20211116050929	2025-02-12 14:10:17
20211116051442	2025-02-12 14:10:17
20211116212300	2025-02-12 14:10:18
20211116213355	2025-02-12 14:10:19
20211116213934	2025-02-12 14:10:19
20211116214523	2025-02-12 14:10:20
20211122062447	2025-02-12 14:10:21
20211124070109	2025-02-12 14:10:21
20211202204204	2025-02-12 14:10:22
20211202204605	2025-02-12 14:10:23
20211210212804	2025-02-12 14:10:25
20211228014915	2025-02-12 14:10:25
20220107221237	2025-02-12 14:10:26
20220228202821	2025-02-12 14:10:27
20220312004840	2025-02-12 14:10:27
20220603231003	2025-02-12 14:10:28
20220603232444	2025-02-12 14:10:29
20220615214548	2025-02-12 14:10:30
20220712093339	2025-02-12 14:10:30
20220908172859	2025-02-12 14:10:31
20220916233421	2025-02-12 14:10:31
20230119133233	2025-02-12 14:10:32
20230128025114	2025-02-12 14:10:33
20230128025212	2025-02-12 14:10:34
20230227211149	2025-02-12 14:10:34
20230228184745	2025-02-12 14:10:35
20230308225145	2025-02-12 14:10:35
20230328144023	2025-02-12 14:10:36
20231018144023	2025-02-12 14:10:37
20231204144023	2025-02-12 14:10:38
20231204144024	2025-02-12 14:10:38
20231204144025	2025-02-12 14:10:39
20240108234812	2025-02-12 14:10:40
20240109165339	2025-02-12 14:10:40
20240227174441	2025-02-12 14:10:41
20240311171622	2025-02-12 14:10:42
20240321100241	2025-02-12 14:10:44
20240401105812	2025-02-12 14:10:45
20240418121054	2025-02-12 14:10:46
20240523004032	2025-02-12 14:10:48
20240618124746	2025-02-12 14:10:49
20240801235015	2025-02-12 14:10:50
20240805133720	2025-02-12 14:10:51
20240827160934	2025-02-12 14:10:51
20240919163303	2025-02-12 14:10:52
20240919163305	2025-02-12 14:10:53
20241019105805	2025-02-12 14:10:53
20241030150047	2025-02-12 14:10:56
20241108114728	2025-02-12 14:10:57
20241121104152	2025-02-12 14:10:58
20241130184212	2025-02-12 14:10:58
20241220035512	2025-02-12 14:10:59
20241220123912	2025-02-12 14:11:00
20241224161212	2025-02-12 14:11:00
20250107150512	2025-02-12 14:11:01
20250110162412	2025-02-12 14:11:02
20250123174212	2025-02-12 14:11:02
20250128220012	2025-02-12 14:11:03
\.


--
-- TOC entry 4197 (class 0 OID 29051)
-- Dependencies: 280
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- TOC entry 4179 (class 0 OID 16540)
-- Dependencies: 245
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- TOC entry 4181 (class 0 OID 16582)
-- Dependencies: 247
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-02-12 14:10:04.214188
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-02-12 14:10:04.268873
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-02-12 14:10:04.374116
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-02-12 14:10:04.428177
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-02-12 14:10:04.472857
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-02-12 14:10:04.491461
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-02-12 14:10:04.510071
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-02-12 14:10:04.575699
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-02-12 14:10:04.598102
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-02-12 14:10:04.619532
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-02-12 14:10:04.638988
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-02-12 14:10:04.663999
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-02-12 14:10:04.691433
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-02-12 14:10:04.709308
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-02-12 14:10:04.734763
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-02-12 14:10:04.84016
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-02-12 14:10:04.860512
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-02-12 14:10:04.879773
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-02-12 14:10:04.907365
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-02-12 14:10:04.927566
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-02-12 14:10:04.980191
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-02-12 14:10:05.02301
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-02-12 14:10:05.105128
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-02-12 14:10:05.150724
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-02-12 14:10:05.191431
25	custom-metadata	67eb93b7e8d401cafcdc97f9ac779e71a79bfe03	2025-02-12 14:10:05.232141
\.


--
-- TOC entry 4180 (class 0 OID 16555)
-- Dependencies: 246
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
\.


--
-- TOC entry 4193 (class 0 OID 28976)
-- Dependencies: 275
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- TOC entry 4194 (class 0 OID 28990)
-- Dependencies: 276
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- TOC entry 3739 (class 0 OID 16951)
-- Dependencies: 261
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4402 (class 0 OID 0)
-- Dependencies: 240
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 1, false);


--
-- TOC entry 4403 (class 0 OID 0)
-- Dependencies: 254
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- TOC entry 4404 (class 0 OID 0)
-- Dependencies: 292
-- Name: advertisements_id_advertisements_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.advertisements_id_advertisements_seq', 100, true);


--
-- TOC entry 4405 (class 0 OID 0)
-- Dependencies: 290
-- Name: checkin_checkout_records_id_record_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.checkin_checkout_records_id_record_seq', 300, true);


--
-- TOC entry 4406 (class 0 OID 0)
-- Dependencies: 300
-- Name: daily_attendancecanteen_id_record_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.daily_attendancecanteen_id_record_seq', 100, true);


--
-- TOC entry 4407 (class 0 OID 0)
-- Dependencies: 298
-- Name: daily_attendancesecurity_id_record_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.daily_attendancesecurity_id_record_seq', 100, true);


--
-- TOC entry 4408 (class 0 OID 0)
-- Dependencies: 284
-- Name: departments_id_department_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.departments_id_department_seq', 8, true);


--
-- TOC entry 4409 (class 0 OID 0)
-- Dependencies: 288
-- Name: employees_id_employee_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.employees_id_employee_seq', 1, false);


--
-- TOC entry 4410 (class 0 OID 0)
-- Dependencies: 296
-- Name: password_reset_tokens_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.password_reset_tokens_id_seq', 100, true);


--
-- TOC entry 4411 (class 0 OID 0)
-- Dependencies: 294
-- Name: revoked_tokens_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.revoked_tokens_id_seq', 1, false);


--
-- TOC entry 4412 (class 0 OID 0)
-- Dependencies: 286
-- Name: subdepartments_id_subdepartment_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.subdepartments_id_subdepartment_seq', 1, false);


--
-- TOC entry 4413 (class 0 OID 0)
-- Dependencies: 279
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- TOC entry 3900 (class 2606 OID 28769)
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- TOC entry 3851 (class 2606 OID 16525)
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- TOC entry 3922 (class 2606 OID 28875)
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- TOC entry 3879 (class 2606 OID 28893)
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- TOC entry 3881 (class 2606 OID 28903)
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- TOC entry 3849 (class 2606 OID 16518)
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- TOC entry 3902 (class 2606 OID 28762)
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- TOC entry 3898 (class 2606 OID 28750)
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- TOC entry 3890 (class 2606 OID 28943)
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- TOC entry 3892 (class 2606 OID 28737)
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- TOC entry 3926 (class 2606 OID 28928)
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 3843 (class 2606 OID 16508)
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 3846 (class 2606 OID 28679)
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- TOC entry 3911 (class 2606 OID 28809)
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- TOC entry 3913 (class 2606 OID 28807)
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- TOC entry 3918 (class 2606 OID 28823)
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- TOC entry 3854 (class 2606 OID 16531)
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- TOC entry 3885 (class 2606 OID 28700)
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- TOC entry 3908 (class 2606 OID 28790)
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- TOC entry 3904 (class 2606 OID 28781)
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- TOC entry 3836 (class 2606 OID 28863)
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- TOC entry 3838 (class 2606 OID 16495)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 3960 (class 2606 OID 29314)
-- Name: advertisements advertisements_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.advertisements
    ADD CONSTRAINT advertisements_pkey PRIMARY KEY (id_advertisements);


--
-- TOC entry 3956 (class 2606 OID 29298)
-- Name: checkin_checkout_records checkin_checkout_records_id_employee_record_date_record_tim_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.checkin_checkout_records
    ADD CONSTRAINT checkin_checkout_records_id_employee_record_date_record_tim_key UNIQUE (id_employee, record_date, record_time, action);


--
-- TOC entry 3958 (class 2606 OID 29296)
-- Name: checkin_checkout_records checkin_checkout_records_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.checkin_checkout_records
    ADD CONSTRAINT checkin_checkout_records_pkey PRIMARY KEY (id_record);


--
-- TOC entry 3974 (class 2606 OID 29373)
-- Name: daily_attendancecanteen daily_attendancecanteen_id_employee_record_date_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancecanteen
    ADD CONSTRAINT daily_attendancecanteen_id_employee_record_date_key UNIQUE (id_employee, record_date);


--
-- TOC entry 3976 (class 2606 OID 29371)
-- Name: daily_attendancecanteen daily_attendancecanteen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancecanteen
    ADD CONSTRAINT daily_attendancecanteen_pkey PRIMARY KEY (id_record);


--
-- TOC entry 3970 (class 2606 OID 29355)
-- Name: daily_attendancesecurity daily_attendancesecurity_id_employee_record_date_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancesecurity
    ADD CONSTRAINT daily_attendancesecurity_id_employee_record_date_key UNIQUE (id_employee, record_date);


--
-- TOC entry 3972 (class 2606 OID 29353)
-- Name: daily_attendancesecurity daily_attendancesecurity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancesecurity
    ADD CONSTRAINT daily_attendancesecurity_pkey PRIMARY KEY (id_record);


--
-- TOC entry 3944 (class 2606 OID 29239)
-- Name: departments departments_name_department_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.departments
    ADD CONSTRAINT departments_name_department_key UNIQUE (name_department);


--
-- TOC entry 3946 (class 2606 OID 29237)
-- Name: departments departments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.departments
    ADD CONSTRAINT departments_pkey PRIMARY KEY (id_department);


--
-- TOC entry 3950 (class 2606 OID 29268)
-- Name: employees employees_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_email_key UNIQUE (email);


--
-- TOC entry 3952 (class 2606 OID 29270)
-- Name: employees employees_nfc_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_nfc_id_key UNIQUE (nfc_id);


--
-- TOC entry 3954 (class 2606 OID 29266)
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id_employee);


--
-- TOC entry 3966 (class 2606 OID 29334)
-- Name: password_reset_tokens password_reset_tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.password_reset_tokens
    ADD CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 3968 (class 2606 OID 29336)
-- Name: password_reset_tokens password_reset_tokens_token_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.password_reset_tokens
    ADD CONSTRAINT password_reset_tokens_token_key UNIQUE (token);


--
-- TOC entry 3962 (class 2606 OID 29323)
-- Name: revoked_tokens revoked_tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.revoked_tokens
    ADD CONSTRAINT revoked_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 3964 (class 2606 OID 29325)
-- Name: revoked_tokens revoked_tokens_token_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.revoked_tokens
    ADD CONSTRAINT revoked_tokens_token_key UNIQUE (token);


--
-- TOC entry 3948 (class 2606 OID 29248)
-- Name: subdepartments subdepartments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subdepartments
    ADD CONSTRAINT subdepartments_pkey PRIMARY KEY (id_subdepartment);


--
-- TOC entry 3942 (class 2606 OID 29208)
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- TOC entry 3939 (class 2606 OID 29059)
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- TOC entry 3936 (class 2606 OID 29033)
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- TOC entry 3857 (class 2606 OID 16548)
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- TOC entry 3864 (class 2606 OID 16589)
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- TOC entry 3866 (class 2606 OID 16587)
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 3862 (class 2606 OID 16565)
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- TOC entry 3934 (class 2606 OID 28999)
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- TOC entry 3932 (class 2606 OID 28984)
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- TOC entry 3852 (class 1259 OID 16526)
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- TOC entry 3826 (class 1259 OID 28689)
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3827 (class 1259 OID 28691)
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3828 (class 1259 OID 28692)
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3888 (class 1259 OID 28771)
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- TOC entry 3920 (class 1259 OID 28879)
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- TOC entry 3877 (class 1259 OID 28859)
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- TOC entry 4414 (class 0 OID 0)
-- Dependencies: 3877
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- TOC entry 3882 (class 1259 OID 28686)
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- TOC entry 3923 (class 1259 OID 28876)
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- TOC entry 3924 (class 1259 OID 28877)
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- TOC entry 3896 (class 1259 OID 28882)
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- TOC entry 3893 (class 1259 OID 28743)
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- TOC entry 3894 (class 1259 OID 28888)
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- TOC entry 3927 (class 1259 OID 28935)
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- TOC entry 3928 (class 1259 OID 28934)
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- TOC entry 3929 (class 1259 OID 28936)
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- TOC entry 3829 (class 1259 OID 28693)
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3830 (class 1259 OID 28690)
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3839 (class 1259 OID 16509)
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- TOC entry 3840 (class 1259 OID 16510)
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- TOC entry 3841 (class 1259 OID 28685)
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- TOC entry 3844 (class 1259 OID 28773)
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- TOC entry 3847 (class 1259 OID 28878)
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- TOC entry 3914 (class 1259 OID 28815)
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- TOC entry 3915 (class 1259 OID 28880)
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- TOC entry 3916 (class 1259 OID 28830)
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- TOC entry 3919 (class 1259 OID 28829)
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- TOC entry 3883 (class 1259 OID 28881)
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- TOC entry 3886 (class 1259 OID 28772)
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- TOC entry 3906 (class 1259 OID 28797)
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- TOC entry 3909 (class 1259 OID 28796)
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- TOC entry 3905 (class 1259 OID 28782)
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- TOC entry 3895 (class 1259 OID 28941)
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- TOC entry 3887 (class 1259 OID 28770)
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- TOC entry 3831 (class 1259 OID 28850)
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- TOC entry 4415 (class 0 OID 0)
-- Dependencies: 3831
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- TOC entry 3832 (class 1259 OID 28687)
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- TOC entry 3833 (class 1259 OID 16499)
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- TOC entry 3834 (class 1259 OID 28905)
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- TOC entry 3937 (class 1259 OID 29209)
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- TOC entry 3940 (class 1259 OID 29108)
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- TOC entry 3855 (class 1259 OID 16554)
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- TOC entry 3858 (class 1259 OID 16576)
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- TOC entry 3930 (class 1259 OID 29010)
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- TOC entry 3859 (class 1259 OID 28975)
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- TOC entry 3860 (class 1259 OID 16577)
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- TOC entry 4000 (class 2620 OID 29064)
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- TOC entry 3999 (class 2620 OID 28963)
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- TOC entry 3979 (class 2606 OID 28673)
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 3983 (class 2606 OID 28763)
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- TOC entry 3982 (class 2606 OID 28751)
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- TOC entry 3981 (class 2606 OID 28738)
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 3988 (class 2606 OID 28929)
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 3977 (class 2606 OID 28706)
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- TOC entry 3985 (class 2606 OID 28810)
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- TOC entry 3986 (class 2606 OID 28883)
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- TOC entry 3987 (class 2606 OID 28824)
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- TOC entry 3980 (class 2606 OID 28701)
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 3984 (class 2606 OID 28791)
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- TOC entry 3995 (class 2606 OID 29299)
-- Name: checkin_checkout_records checkin_checkout_records_id_employee_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.checkin_checkout_records
    ADD CONSTRAINT checkin_checkout_records_id_employee_fkey FOREIGN KEY (id_employee) REFERENCES public.employees(id_employee);


--
-- TOC entry 3998 (class 2606 OID 29374)
-- Name: daily_attendancecanteen daily_attendancecanteen_id_employee_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancecanteen
    ADD CONSTRAINT daily_attendancecanteen_id_employee_fkey FOREIGN KEY (id_employee) REFERENCES public.employees(id_employee);


--
-- TOC entry 3997 (class 2606 OID 29356)
-- Name: daily_attendancesecurity daily_attendancesecurity_id_employee_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.daily_attendancesecurity
    ADD CONSTRAINT daily_attendancesecurity_id_employee_fkey FOREIGN KEY (id_employee) REFERENCES public.employees(id_employee);


--
-- TOC entry 3993 (class 2606 OID 29271)
-- Name: employees employees_department_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_department_fkey FOREIGN KEY (department) REFERENCES public.departments(id_department);


--
-- TOC entry 3994 (class 2606 OID 29276)
-- Name: employees employees_subdepartment_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_subdepartment_fkey FOREIGN KEY (subdepartment) REFERENCES public.subdepartments(id_subdepartment);


--
-- TOC entry 3996 (class 2606 OID 29337)
-- Name: password_reset_tokens password_reset_tokens_id_employee_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.password_reset_tokens
    ADD CONSTRAINT password_reset_tokens_id_employee_fkey FOREIGN KEY (id_employee) REFERENCES public.employees(id_employee);


--
-- TOC entry 3992 (class 2606 OID 29249)
-- Name: subdepartments subdepartments_id_department_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subdepartments
    ADD CONSTRAINT subdepartments_id_department_fkey FOREIGN KEY (id_department) REFERENCES public.departments(id_department);


--
-- TOC entry 3978 (class 2606 OID 16566)
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 3989 (class 2606 OID 28985)
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 3990 (class 2606 OID 29005)
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 3991 (class 2606 OID 29000)
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- TOC entry 4153 (class 0 OID 16519)
-- Dependencies: 243
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4167 (class 0 OID 28869)
-- Dependencies: 273
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4158 (class 0 OID 28666)
-- Dependencies: 264
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4152 (class 0 OID 16512)
-- Dependencies: 242
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4162 (class 0 OID 28756)
-- Dependencies: 268
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4161 (class 0 OID 28744)
-- Dependencies: 267
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4160 (class 0 OID 28731)
-- Dependencies: 266
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4168 (class 0 OID 28919)
-- Dependencies: 274
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4151 (class 0 OID 16501)
-- Dependencies: 241
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4165 (class 0 OID 28798)
-- Dependencies: 271
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4166 (class 0 OID 28816)
-- Dependencies: 272
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4154 (class 0 OID 16527)
-- Dependencies: 244
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4159 (class 0 OID 28696)
-- Dependencies: 265
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4164 (class 0 OID 28783)
-- Dependencies: 270
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4163 (class 0 OID 28774)
-- Dependencies: 269
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4150 (class 0 OID 16489)
-- Dependencies: 239
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4171 (class 0 OID 29194)
-- Dependencies: 283
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4155 (class 0 OID 16540)
-- Dependencies: 245
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4157 (class 0 OID 16582)
-- Dependencies: 247
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4156 (class 0 OID 16555)
-- Dependencies: 246
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4169 (class 0 OID 28976)
-- Dependencies: 275
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4170 (class 0 OID 28990)
-- Dependencies: 276
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4172 (class 6104 OID 16420)
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- TOC entry 4221 (class 0 OID 0)
-- Dependencies: 16
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- TOC entry 4222 (class 0 OID 0)
-- Dependencies: 14
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- TOC entry 4224 (class 0 OID 0)
-- Dependencies: 13
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- TOC entry 4225 (class 0 OID 0)
-- Dependencies: 17
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- TOC entry 4226 (class 0 OID 0)
-- Dependencies: 15
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- TOC entry 4234 (class 0 OID 0)
-- Dependencies: 371
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- TOC entry 4235 (class 0 OID 0)
-- Dependencies: 523
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- TOC entry 4237 (class 0 OID 0)
-- Dependencies: 370
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- TOC entry 4239 (class 0 OID 0)
-- Dependencies: 369
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- TOC entry 4240 (class 0 OID 0)
-- Dependencies: 365
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- TOC entry 4241 (class 0 OID 0)
-- Dependencies: 359
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- TOC entry 4242 (class 0 OID 0)
-- Dependencies: 360
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- TOC entry 4243 (class 0 OID 0)
-- Dependencies: 331
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- TOC entry 4244 (class 0 OID 0)
-- Dependencies: 361
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- TOC entry 4245 (class 0 OID 0)
-- Dependencies: 335
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4246 (class 0 OID 0)
-- Dependencies: 337
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4247 (class 0 OID 0)
-- Dependencies: 328
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- TOC entry 4248 (class 0 OID 0)
-- Dependencies: 327
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- TOC entry 4249 (class 0 OID 0)
-- Dependencies: 334
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4250 (class 0 OID 0)
-- Dependencies: 336
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4251 (class 0 OID 0)
-- Dependencies: 338
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- TOC entry 4252 (class 0 OID 0)
-- Dependencies: 339
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- TOC entry 4253 (class 0 OID 0)
-- Dependencies: 332
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- TOC entry 4254 (class 0 OID 0)
-- Dependencies: 333
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- TOC entry 4256 (class 0 OID 0)
-- Dependencies: 372
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- TOC entry 4258 (class 0 OID 0)
-- Dependencies: 376
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4260 (class 0 OID 0)
-- Dependencies: 373
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- TOC entry 4261 (class 0 OID 0)
-- Dependencies: 330
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4262 (class 0 OID 0)
-- Dependencies: 329
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- TOC entry 4263 (class 0 OID 0)
-- Dependencies: 316
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- TOC entry 4264 (class 0 OID 0)
-- Dependencies: 315
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- TOC entry 4265 (class 0 OID 0)
-- Dependencies: 314
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- TOC entry 4266 (class 0 OID 0)
-- Dependencies: 362
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- TOC entry 4267 (class 0 OID 0)
-- Dependencies: 358
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- TOC entry 4268 (class 0 OID 0)
-- Dependencies: 352
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- TOC entry 4269 (class 0 OID 0)
-- Dependencies: 354
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4270 (class 0 OID 0)
-- Dependencies: 356
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- TOC entry 4271 (class 0 OID 0)
-- Dependencies: 353
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- TOC entry 4272 (class 0 OID 0)
-- Dependencies: 355
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4273 (class 0 OID 0)
-- Dependencies: 357
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- TOC entry 4274 (class 0 OID 0)
-- Dependencies: 348
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- TOC entry 4275 (class 0 OID 0)
-- Dependencies: 350
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- TOC entry 4276 (class 0 OID 0)
-- Dependencies: 349
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- TOC entry 4277 (class 0 OID 0)
-- Dependencies: 351
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4278 (class 0 OID 0)
-- Dependencies: 344
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- TOC entry 4279 (class 0 OID 0)
-- Dependencies: 346
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- TOC entry 4280 (class 0 OID 0)
-- Dependencies: 345
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- TOC entry 4281 (class 0 OID 0)
-- Dependencies: 347
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- TOC entry 4282 (class 0 OID 0)
-- Dependencies: 340
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- TOC entry 4283 (class 0 OID 0)
-- Dependencies: 342
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- TOC entry 4284 (class 0 OID 0)
-- Dependencies: 341
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- TOC entry 4285 (class 0 OID 0)
-- Dependencies: 343
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- TOC entry 4286 (class 0 OID 0)
-- Dependencies: 374
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4287 (class 0 OID 0)
-- Dependencies: 375
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4289 (class 0 OID 0)
-- Dependencies: 377
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4290 (class 0 OID 0)
-- Dependencies: 366
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- TOC entry 4291 (class 0 OID 0)
-- Dependencies: 368
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.try_cast_double(inp text) FROM postgres;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- TOC entry 4292 (class 0 OID 0)
-- Dependencies: 364
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_decode(data text) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- TOC entry 4293 (class 0 OID 0)
-- Dependencies: 363
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_encode(data bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- TOC entry 4294 (class 0 OID 0)
-- Dependencies: 322
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- TOC entry 4295 (class 0 OID 0)
-- Dependencies: 323
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- TOC entry 4296 (class 0 OID 0)
-- Dependencies: 324
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- TOC entry 4297 (class 0 OID 0)
-- Dependencies: 325
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- TOC entry 4298 (class 0 OID 0)
-- Dependencies: 326
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- TOC entry 4299 (class 0 OID 0)
-- Dependencies: 317
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- TOC entry 4300 (class 0 OID 0)
-- Dependencies: 318
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- TOC entry 4301 (class 0 OID 0)
-- Dependencies: 320
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- TOC entry 4302 (class 0 OID 0)
-- Dependencies: 319
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- TOC entry 4303 (class 0 OID 0)
-- Dependencies: 321
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- TOC entry 4304 (class 0 OID 0)
-- Dependencies: 367
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- TOC entry 4305 (class 0 OID 0)
-- Dependencies: 522
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- TOC entry 4306 (class 0 OID 0)
-- Dependencies: 313
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- TOC entry 4307 (class 0 OID 0)
-- Dependencies: 480
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- TOC entry 4308 (class 0 OID 0)
-- Dependencies: 479
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- TOC entry 4309 (class 0 OID 0)
-- Dependencies: 462
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- TOC entry 4310 (class 0 OID 0)
-- Dependencies: 539
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- TOC entry 4311 (class 0 OID 0)
-- Dependencies: 545
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- TOC entry 4312 (class 0 OID 0)
-- Dependencies: 541
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- TOC entry 4313 (class 0 OID 0)
-- Dependencies: 537
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- TOC entry 4314 (class 0 OID 0)
-- Dependencies: 536
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- TOC entry 4315 (class 0 OID 0)
-- Dependencies: 540
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- TOC entry 4316 (class 0 OID 0)
-- Dependencies: 542
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- TOC entry 4317 (class 0 OID 0)
-- Dependencies: 535
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- TOC entry 4318 (class 0 OID 0)
-- Dependencies: 544
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- TOC entry 4319 (class 0 OID 0)
-- Dependencies: 534
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- TOC entry 4320 (class 0 OID 0)
-- Dependencies: 538
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- TOC entry 4321 (class 0 OID 0)
-- Dependencies: 543
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- TOC entry 4323 (class 0 OID 0)
-- Dependencies: 243
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- TOC entry 4325 (class 0 OID 0)
-- Dependencies: 273
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO dashboard_user;


--
-- TOC entry 4328 (class 0 OID 0)
-- Dependencies: 264
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO dashboard_user;


--
-- TOC entry 4330 (class 0 OID 0)
-- Dependencies: 242
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- TOC entry 4332 (class 0 OID 0)
-- Dependencies: 268
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- TOC entry 4334 (class 0 OID 0)
-- Dependencies: 267
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- TOC entry 4336 (class 0 OID 0)
-- Dependencies: 266
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO dashboard_user;


--
-- TOC entry 4337 (class 0 OID 0)
-- Dependencies: 274
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- TOC entry 4339 (class 0 OID 0)
-- Dependencies: 241
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- TOC entry 4341 (class 0 OID 0)
-- Dependencies: 240
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- TOC entry 4343 (class 0 OID 0)
-- Dependencies: 271
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO dashboard_user;


--
-- TOC entry 4345 (class 0 OID 0)
-- Dependencies: 272
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- TOC entry 4347 (class 0 OID 0)
-- Dependencies: 244
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- TOC entry 4350 (class 0 OID 0)
-- Dependencies: 265
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO dashboard_user;


--
-- TOC entry 4352 (class 0 OID 0)
-- Dependencies: 270
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO dashboard_user;


--
-- TOC entry 4355 (class 0 OID 0)
-- Dependencies: 269
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO dashboard_user;


--
-- TOC entry 4358 (class 0 OID 0)
-- Dependencies: 239
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- TOC entry 4359 (class 0 OID 0)
-- Dependencies: 238
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- TOC entry 4360 (class 0 OID 0)
-- Dependencies: 237
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- TOC entry 4361 (class 0 OID 0)
-- Dependencies: 260
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- TOC entry 4362 (class 0 OID 0)
-- Dependencies: 258
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- TOC entry 4363 (class 0 OID 0)
-- Dependencies: 259
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- TOC entry 4364 (class 0 OID 0)
-- Dependencies: 293
-- Name: TABLE advertisements; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.advertisements TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.advertisements TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.advertisements TO service_role;


--
-- TOC entry 4366 (class 0 OID 0)
-- Dependencies: 292
-- Name: SEQUENCE advertisements_id_advertisements_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.advertisements_id_advertisements_seq TO anon;
GRANT ALL ON SEQUENCE public.advertisements_id_advertisements_seq TO authenticated;
GRANT ALL ON SEQUENCE public.advertisements_id_advertisements_seq TO service_role;


--
-- TOC entry 4367 (class 0 OID 0)
-- Dependencies: 291
-- Name: TABLE checkin_checkout_records; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.checkin_checkout_records TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.checkin_checkout_records TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.checkin_checkout_records TO service_role;


--
-- TOC entry 4369 (class 0 OID 0)
-- Dependencies: 290
-- Name: SEQUENCE checkin_checkout_records_id_record_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.checkin_checkout_records_id_record_seq TO anon;
GRANT ALL ON SEQUENCE public.checkin_checkout_records_id_record_seq TO authenticated;
GRANT ALL ON SEQUENCE public.checkin_checkout_records_id_record_seq TO service_role;


--
-- TOC entry 4370 (class 0 OID 0)
-- Dependencies: 301
-- Name: TABLE daily_attendancecanteen; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.daily_attendancecanteen TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.daily_attendancecanteen TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.daily_attendancecanteen TO service_role;


--
-- TOC entry 4372 (class 0 OID 0)
-- Dependencies: 300
-- Name: SEQUENCE daily_attendancecanteen_id_record_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.daily_attendancecanteen_id_record_seq TO anon;
GRANT ALL ON SEQUENCE public.daily_attendancecanteen_id_record_seq TO authenticated;
GRANT ALL ON SEQUENCE public.daily_attendancecanteen_id_record_seq TO service_role;


--
-- TOC entry 4373 (class 0 OID 0)
-- Dependencies: 299
-- Name: TABLE daily_attendancesecurity; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.daily_attendancesecurity TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.daily_attendancesecurity TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.daily_attendancesecurity TO service_role;


--
-- TOC entry 4375 (class 0 OID 0)
-- Dependencies: 298
-- Name: SEQUENCE daily_attendancesecurity_id_record_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.daily_attendancesecurity_id_record_seq TO anon;
GRANT ALL ON SEQUENCE public.daily_attendancesecurity_id_record_seq TO authenticated;
GRANT ALL ON SEQUENCE public.daily_attendancesecurity_id_record_seq TO service_role;


--
-- TOC entry 4376 (class 0 OID 0)
-- Dependencies: 285
-- Name: TABLE departments; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.departments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.departments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.departments TO service_role;


--
-- TOC entry 4378 (class 0 OID 0)
-- Dependencies: 284
-- Name: SEQUENCE departments_id_department_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.departments_id_department_seq TO anon;
GRANT ALL ON SEQUENCE public.departments_id_department_seq TO authenticated;
GRANT ALL ON SEQUENCE public.departments_id_department_seq TO service_role;


--
-- TOC entry 4379 (class 0 OID 0)
-- Dependencies: 289
-- Name: TABLE employees; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.employees TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.employees TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.employees TO service_role;


--
-- TOC entry 4381 (class 0 OID 0)
-- Dependencies: 288
-- Name: SEQUENCE employees_id_employee_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.employees_id_employee_seq TO anon;
GRANT ALL ON SEQUENCE public.employees_id_employee_seq TO authenticated;
GRANT ALL ON SEQUENCE public.employees_id_employee_seq TO service_role;


--
-- TOC entry 4382 (class 0 OID 0)
-- Dependencies: 297
-- Name: TABLE password_reset_tokens; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.password_reset_tokens TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.password_reset_tokens TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.password_reset_tokens TO service_role;


--
-- TOC entry 4384 (class 0 OID 0)
-- Dependencies: 296
-- Name: SEQUENCE password_reset_tokens_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.password_reset_tokens_id_seq TO anon;
GRANT ALL ON SEQUENCE public.password_reset_tokens_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.password_reset_tokens_id_seq TO service_role;


--
-- TOC entry 4385 (class 0 OID 0)
-- Dependencies: 295
-- Name: TABLE revoked_tokens; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.revoked_tokens TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.revoked_tokens TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.revoked_tokens TO service_role;


--
-- TOC entry 4387 (class 0 OID 0)
-- Dependencies: 294
-- Name: SEQUENCE revoked_tokens_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.revoked_tokens_id_seq TO anon;
GRANT ALL ON SEQUENCE public.revoked_tokens_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.revoked_tokens_id_seq TO service_role;


--
-- TOC entry 4388 (class 0 OID 0)
-- Dependencies: 287
-- Name: TABLE subdepartments; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.subdepartments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.subdepartments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.subdepartments TO service_role;


--
-- TOC entry 4390 (class 0 OID 0)
-- Dependencies: 286
-- Name: SEQUENCE subdepartments_id_subdepartment_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.subdepartments_id_subdepartment_seq TO anon;
GRANT ALL ON SEQUENCE public.subdepartments_id_subdepartment_seq TO authenticated;
GRANT ALL ON SEQUENCE public.subdepartments_id_subdepartment_seq TO service_role;


--
-- TOC entry 4391 (class 0 OID 0)
-- Dependencies: 283
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- TOC entry 4392 (class 0 OID 0)
-- Dependencies: 277
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.schema_migrations TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- TOC entry 4393 (class 0 OID 0)
-- Dependencies: 280
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.subscription TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- TOC entry 4394 (class 0 OID 0)
-- Dependencies: 279
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- TOC entry 4396 (class 0 OID 0)
-- Dependencies: 245
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO postgres;


--
-- TOC entry 4397 (class 0 OID 0)
-- Dependencies: 247
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO postgres;


--
-- TOC entry 4399 (class 0 OID 0)
-- Dependencies: 246
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO postgres;


--
-- TOC entry 4400 (class 0 OID 0)
-- Dependencies: 275
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- TOC entry 4401 (class 0 OID 0)
-- Dependencies: 276
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- TOC entry 2546 (class 826 OID 16597)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- TOC entry 2547 (class 826 OID 16598)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- TOC entry 2545 (class 826 OID 16596)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO dashboard_user;


--
-- TOC entry 2561 (class 826 OID 16980)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES TO postgres WITH GRANT OPTION;


--
-- TOC entry 2560 (class 826 OID 16979)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS TO postgres WITH GRANT OPTION;


--
-- TOC entry 2559 (class 826 OID 16978)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres WITH GRANT OPTION;


--
-- TOC entry 2564 (class 826 OID 16631)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2563 (class 826 OID 16630)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2562 (class 826 OID 16629)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- TOC entry 2551 (class 826 OID 16611)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2553 (class 826 OID 16610)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2552 (class 826 OID 16609)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- TOC entry 2558 (class 826 OID 16839)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES TO pgsodium_keyholder;


--
-- TOC entry 2557 (class 826 OID 16838)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO pgsodium_keyholder;


--
-- TOC entry 2555 (class 826 OID 16836)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES TO pgsodium_keyiduser;


--
-- TOC entry 2556 (class 826 OID 16837)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS TO pgsodium_keyiduser;


--
-- TOC entry 2554 (class 826 OID 16835)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO pgsodium_keyiduser;


--
-- TOC entry 2538 (class 826 OID 16484)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2539 (class 826 OID 16485)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2537 (class 826 OID 16483)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2541 (class 826 OID 16487)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2536 (class 826 OID 16482)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- TOC entry 2540 (class 826 OID 16486)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- TOC entry 2549 (class 826 OID 16601)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- TOC entry 2550 (class 826 OID 16602)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- TOC entry 2548 (class 826 OID 16600)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO dashboard_user;


--
-- TOC entry 2544 (class 826 OID 16539)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2543 (class 826 OID 16538)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2542 (class 826 OID 16537)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- TOC entry 3730 (class 3466 OID 16615)
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- TOC entry 3736 (class 3466 OID 16993)
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- TOC entry 3729 (class 3466 OID 16613)
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- TOC entry 3728 (class 3466 OID 16594)
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- TOC entry 3731 (class 3466 OID 16616)
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- TOC entry 3732 (class 3466 OID 16617)
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

-- Completed on 2025-02-21 23:11:32

--
-- PostgreSQL database dump complete
--

